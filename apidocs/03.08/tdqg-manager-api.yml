openapi: 3.0.1
info:
  description: "<p> Teradata QueryGrid&trade; Manager provides APIs for centralized\
    \ administration and monitoring of Teradata QueryGrid.  This page documents the\
    \ available APIs.</p>\n<p>API paths should be prefixed with (replace hostname\
    \ with actual hostname or IP address of a QueryGrid Manager instance):</p>\n<code>https://hostname:9443/api/v1</code>\
    \ \n<p>QueryGrid Manager supports HTTP basic authentication.  An API user can\
    \ be created using the Service Accounts tab within the Managers view of the Teradata\
    \ Viewpoint QueryGrid portlet.\nUnless a custom certificate is installed, a self-signed\
    \ certificate is used to secure communication.  The public certificate for the\
    \ cluster can be found \nat /etc/opt/teradata/tdqgm/certs/ca.pem on the QueryGrid\
    \ Manager server.</p>\n<p>Here is an example accessing the Issues API using curl\
    \ (replace hostname and username with appropriate values):</p>\n<code>curl --cacert\
    \ ca.pem -u username https://hostname:9443/api/v1/issues</code>\n<p>Click on the\
    \ resources below to expand the available APIs.</p>"
  title: Teradata QueryGrid Manager API
  version: '03.08'
servers:
- description: Default API endpoint
  url: /api/v1
- description: Querygrid Prefix API endpoint
  url: /querygrid/api/v1
- description: Streaming Prefix API endpoint
  url: /querygrid-streaming/api/v1
security:
- BasicAuth: []
tags:
- description: Information about Manager version and features
  name: API Info
- description: Warnings about QueryGrid environment or configuration issues
  name: Issues
- description: Information about Managers belonging to this cluster
  name: Managers
- description: Information about QueryGrid-attached nodes
  name: Nodes
- description: Information about QueryGrid queries
  name: Queries
- description: Information about uploaded QueryGrid Software
  name: Software
- description: "Generate support archive for a Manager, System, Node, Query, or Bandwidth\
    \ Tests issues"
  name: Support-Archive
- description: Manage users allowed to access QueryGrid Manager APIs
  name: Users
- description: Manage bridges used for routing QueryGrid communication between systems
    without direct connectivity
  name: Config - Bridges
- description: Manage communication policies that define how data is transferred between
    systems
  name: Config - Communication Policies
- description: Manage connectors that connect data sources to the QueryGrid Fabric
  name: Config - Connectors
- description: Manage data centers (a.k.a regions) where QueryGrid software is deployed
  name: Config - Data Centers
- description: Manage fabrics responsible for QueryGrid inter-node communication
  name: Config - Fabrics
- description: Manage links that enable connectivity between connectors
  name: Config - Links
- description: Manage network rules that determine the network interfaces to use for
    communications
  name: Config - Networks
- description: Manage virtual IPs associated with nodes
  name: Config - Node Virtual IPs
- description: Manage the systems or platforms associated with QueryGrid connectors
  name: Config - Systems
- description: Map initiator user and roles to target user and roles
  name: Config - User/Role Mappings
- description: Bulk delete nodes or issues
  name: Operations - Bulk Delete
- description: Start and monitor diagnostic check and connector install operations
  name: Operations - Diagnostic Checks / Connector Install
- description: Import a system from a different QueryGrid Manager cluster
  name: Operations - Import System
- description: Automate install and registration of nodes with QueryGrid Manager
  name: Operations - Nodes Auto Install
- description: Download config file needed for manual install and registration of
    nodes with QueryGrid Manager
  name: Operations - Nodes Manual Install
- description: Estimate memory needed for QueryGrid operations
  name: Operations - Shared Memory Estimator
- description: Create a foreign server for a given link
  name: Operations - Create Foreign Server
- description: Register current system nodes to remote lake system
  name: Operations - Register Remote Lake System
- description: Register a new data source to QueryGrid Manager
  name: Operations - Add Data Source
- description: Generate node registration zip file for a given datasource
  name: Operations - Data Source Registration File
- description: Generate private link template file for a given cloud platform
  name: Operations - Private Link Template
- description: Disable system alerts for a specific system and issue type
  name: Operations - Disable System Alerts
paths:
  /:
    get:
      operationId: getApiInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api-info'
          description: Successful operation
      summary: Get information about the version and features exposed by the API.
      tags:
      - API Info
  /issues:
    get:
      description: Get all the active issues detected by QueryGrid Manager
      operationId: getIssues
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/issue'
                type: array
          description: Successful Operation
      summary: Find all the issues
      tags:
      - Issues
    post:
      description: Create or update an issue in QueryGrid Manager
      operationId: createOrUpdateIssue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-issue'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create or update an issue
      tags:
      - Issues
  /issues/{id}:
    delete:
      description: Delete a single issue based on the Id supplied
      parameters:
      - description: Id of issue that needs to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Issue deleted
      summary: Delete issue using Id
      tags:
      - Issues
    get:
      description: Get the issue using the Id
      parameters:
      - description: Id of issue to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/issue'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No issue found with the specified Id
      summary: Find issue by Id
      tags:
      - Issues
  /managers:
    get:
      description: Get all the managers in the cluster
      operationId: getManagers
      parameters:
      - description: "Include additional information with manager instances such as\
          \ status, disk usage, etc."
        in: query
        name: extraInfo
        required: false
        schema:
          type: boolean
      - description: Get manager associated with the specified hostname (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/manager'
                type: array
          description: Successful Operation
      summary: Find all the managers
      tags:
      - Managers
  /managers/{id}:
    delete:
      description: Delete a single manager based on the Id supplied
      parameters:
      - description: Id of manager that needs to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Manager deleted
      summary: Delete manager using Id
      tags:
      - Managers
    get:
      description: Get the manager using the Id
      parameters:
      - description: Id of manager to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manager'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No manager found with the specified Id
      summary: Find manager by Id
      tags:
      - Managers
  /nodes:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_nodes_delete_request'
        description: Optional description in *Markdown*
        required: true
      responses:
        "200":
          description: node deleted
      summary: Bulk delete nodes
      tags:
      - Nodes
    get:
      description: Get all the nodes configured in QGM
      operationId: getNodes
      parameters:
      - description: Include only items associated with the specified system.
        in: query
        name: filterBySystemId
        required: false
        schema:
          type: string
      - description: Only show nodes associated with the specified fabric.
        in: query
        name: filterByFabricId
        required: false
        schema:
          type: string
      - description: Only show nodes associated with the specified connector.
        in: query
        name: filterByConnectorId
        required: false
        schema:
          type: string
      - description: "Include additional information with node instances such as status,\
          \ system name, etc."
        in: query
        name: extraInfo
        required: false
        schema:
          type: boolean
      - description: The version of the fabric to make the node status relative to.
        in: query
        name: fabricVersion
        required: false
        schema:
          type: string
      - description: The version of the connector make the node status relative to.
        in: query
        name: connectorVersion
        required: false
        schema:
          type: string
      - description: Filter by and make status relative to the drivers for the specified
          connector
        in: query
        name: drivers
        required: false
        schema:
          type: string
      - description: "Include details of the fabrics and connectors the node is running.\
          \  Should only be used when displaying a nodes details screen, not when\
          \ displaying the data grid."
        in: query
        name: details
        required: false
        schema:
          type: boolean
      - description: Get node associated with the specified hostname (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/node'
                type: array
          description: Successful Operation
      summary: Find all the nodes
      tags:
      - Nodes
  /nodes/{id}:
    delete:
      description: Delete a single node based on the Id supplied
      operationId: deleteNodeById
      parameters:
      - description: Id of node that needs to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Node deleted
      summary: Delete node using Id
      tags:
      - Nodes
    get:
      description: Get the node using the Id
      operationId: getNodeById
      parameters:
      - description: Id of node to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No node found with the specified Id
      summary: Find node by Id
      tags:
      - Nodes
  /nodes/{id}/heartbeat:
    get:
      description: Get the last watchdog heartbeat using node Id
      operationId: getLastWatchDogHeartbeat
      parameters:
      - description: Id of node
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchdog-heartbeat'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No node found with the specified Id
      summary: Get last watchdog heartbeat using node Id
      tags:
      - Nodes
  /queries:
    get:
      description: Returns currently or recently active queries when no parameters
        are specified.
      parameters:
      - description: Return all query summary that have been modified since the time
          provided.  Time should be provided in ISO8601 format.
        in: query
        name: lastModifiedAfter
        schema:
          type: string
      - description: Only return queries that are completed.
        in: query
        name: completed
        schema:
          type: boolean
      - description: Only return queries that contain the supplied phrase in the query
          text.
        in: query
        name: queryTextPhrase
        schema:
          type: string
      - description: Lookup query summary using query reference IDs of the query.
        in: query
        name: queryRefIds
      - description: Lookup query summary using ID of the query on the initiator system.
        in: query
        name: initiatorQueryId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/query-summary'
                type: array
          description: Successful Operation
      summary: Get query summary records.
      tags:
      - Queries
  /queries/{id}:
    get:
      description: Get the query summary using the query Id
      parameters:
      - description: Id of query to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query-summary'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No query found with the specified Id
      summary: Find query summary by Id
      tags:
      - Queries
  /queries/{id}/details:
    get:
      description: Get the query using the Id
      parameters:
      - description: Id of query to get details on
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query-details'
          description: Collection of query details. Empty array in case Id not found.
      summary: Find query details by Id
      tags:
      - Queries
  /software:
    get:
      description: Get all the software packages uploaded to QueryGrid Manager
      operationId: getSoftware
      parameters:
      - description: Get software associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/software'
                type: array
          description: Successful Operation
      summary: Find all software
      tags:
      - Software
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/_software_post_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/software'
                type: array
          description: Successful Operation
      summary: Upload software
      tags:
      - Software
  /software/jdbc-driver:
    get:
      description: Get all the JDBC driver software packages uploaded to QueryGrid
        Manager
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/software'
                type: array
          description: Successful Operation
      summary: Find all JDBC driver software
      tags:
      - Software
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/_software_jdbc_driver_post_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/software'
                type: array
          description: Successful Operation
      summary: Upload software
      tags:
      - Software
  /software/jdbc-driver/{jdbcDriverName}:
    get:
      description: Get the software using the jdbcDriverName
      parameters:
      - description: jdbcDriverName of software to get
        in: path
        name: jdbcDriverName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/software'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No software found with the specified jdbcDriverName
      summary: Find software by jdbcDriverName
      tags:
      - Software
  /software/jdbc-driver/{id}:
    delete:
      description: Delete a single Jdbc-driver software based on the Id supplied
      parameters:
      - description: Id of Jdbc-driver software that needs to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Software deleted
      summary: Delete Jdbc-driver software using Id
      tags:
      - Software
  /software/{id}:
    delete:
      description: Delete a single software based on the Id supplied
      parameters:
      - description: Id of software that needs to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Software deleted
      summary: Delete software using Id
      tags:
      - Software
    get:
      description: Get the software using the Id
      parameters:
      - description: Id of software to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/software'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No software found with the specified Id
      summary: Find software by Id
      tags:
      - Software
  /software/{id}/package:
    get:
      description: Download the software using the Id
      parameters:
      - description: Id of software to download
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response to download the software package.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No software found with the specified Id
      summary: Download software by Id
      tags:
      - Software
  /software/{id}/resource-bundle:
    get:
      description: Download the software resource-bundle using the Id
      parameters:
      - description: Id of software of the resource bundle to download
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The locale of the resource bundle to get
        in: query
        name: locale
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Resource bundle data in JSON format.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: No resource bundle found in the specified software package.
      summary: Download resource-bundle by Id
      tags:
      - Software
  /users:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
                type: array
          description: Successful operation
      summary: Get all Users
      tags:
      - Users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: User created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new User
      tags:
      - Users
  /users/{username}:
    delete:
      parameters:
      - description: Username of account to delete
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a User by ID
      tags:
      - Users
    get:
      parameters:
      - description: Username of account to get
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: Not Found
      summary: Get a User by ID
      tags:
      - Users
    put:
      parameters:
      - description: Username of account to update
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-post'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-post'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-entity'
          description: Not Found
      summary: Update a User
      tags:
      - Users
  /config/datacenters:
    get:
      parameters:
      - description: Get data center associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/data-center'
                type: array
          description: Successful operation
      summary: Get all Data Centers
      tags:
      - Config - Data Centers
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-data-center'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data-center'
          description: Data Center created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Data Center
      tags:
      - Config - Data Centers
  /config/datacenters/{id}:
    delete:
      parameters:
      - description: ID of the DataCenter to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Data Center by ID
      tags:
      - Config - Data Centers
    get:
      parameters:
      - description: ID of the Data Center
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data-center'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Data Center by ID
      tags:
      - Config - Data Centers
    put:
      parameters:
      - description: ID of the DataCenter to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-data-center'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data-center'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update a Data Center
      tags:
      - Config - Data Centers
  /config/systems:
    get:
      parameters:
      - description: Provide extra details (in _extraInfo section) about the system.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: Filter systems based on proxy support type.
        in: query
        name: filterByProxySupport
        required: false
        schema:
          enum:
          - NO_PROXY
          - LOCAL_PROXY
          - BRIDGE_PROXY
          type: string
      - description: Get system associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get system associated with the specified tag. Provide ','(comma)\
          \ separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/system'
                type: array
          description: Successful operation
      summary: Get all Systems
      tags:
      - Config - Systems
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-system'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: System created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new System
      tags:
      - Config - Systems
  /config/systems/{id}:
    delete:
      parameters:
      - description: ID of the System to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a System by ID
      tags:
      - Config - Systems
    get:
      parameters:
      - description: ID of the System
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the system.
        in: query
        name: extraInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a System by ID
      tags:
      - Config - Systems
    put:
      parameters:
      - description: ID of the System to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-system'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update a System
      tags:
      - Config - Systems
  /config/bridges:
    get:
      parameters:
      - description: Get bridges associated with the specified system.
        in: query
        name: filterBySystemId
        required: false
        schema:
          type: string
      - description: Get bridge associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/bridge'
                type: array
          description: Successful operation
      summary: Get all Bridges
      tags:
      - Config - Bridges
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-bridge'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bridge'
          description: Bridge created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Bridge
      tags:
      - Config - Bridges
  /config/bridges/{id}:
    delete:
      parameters:
      - description: ID of the Bridge to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Bridge by ID
      tags:
      - Config - Bridges
    get:
      parameters:
      - description: ID of the Bridge
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bridge'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Bridges by ID
      tags:
      - Config - Bridges
    put:
      parameters:
      - description: ID of the Bridge to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-bridge'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bridge'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update a Bridge
      tags:
      - Config - Bridges
  /config/comm-policies:
    get:
      parameters:
      - description: "Flatten out the active, pending, and previous versions into\
          \ array elements instead of nesting them."
        in: query
        name: flatten
        schema:
          type: boolean
      - description: Provide extra details (in _extraInfo section) about the communication
          policy.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: Get communication policy associated with the specified name (case
          insensitive). Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get communication policy associated with the specified tag.\
          \ Provide ','(comma) separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/comm-policy'
                type: array
          description: Successful operation
      summary: Get all Communication Policies
      tags:
      - Config - Communication Policies
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-comm-policy'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comm-policy'
          description: Communication Policy created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Communication Policy
      tags:
      - Config - Communication Policies
  /config/comm-policies/{id}:
    delete:
      parameters:
      - description: ID of the Communication Policy to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Communication Policy by ID
      tags:
      - Config - Communication Policies
    get:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the communication
          policy.
        in: query
        name: extraInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Communication Policy by ID
      tags:
      - Config - Communication Policies
    patch:
      parameters:
      - description: ID of the Communication Policy to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_config_comm_policies__id__patch_request'
        description: Optional description in *Markdown*
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comm-policy'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update Communication Policy name or description
      tags:
      - Config - Communication Policies
  /config/comm-policies/{id}/active:
    get:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/active-comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the active version for a Communication Policy
      tags:
      - Config - Communication Policies
    patch:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: db6f0a2e-a368-4a97-91fb-cf3f61d72704
              type: string
        description: The version ID of the version to activate.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Activate pending or previous communication policy version
      tags:
      - Config - Communication Policies
    put:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-comm-policy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comm-policy-version'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the active Communication Policy version
      tags:
      - Config - Communication Policies
  /config/comm-policies/{id}/pending:
    delete:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the pending Communication Policy version
      tags:
      - Config - Communication Policies
    get:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending-comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the pending version for a Communication Policy
      tags:
      - Config - Communication Policies
    put:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-comm-policy'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the pending Communication Policy version
      tags:
      - Config - Communication Policies
  /config/comm-policies/{id}/previous:
    delete:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the previous Communication Policy version
      tags:
      - Config - Communication Policies
    get:
      parameters:
      - description: ID of the Communication Policy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previous-comm-policy'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the previous version for a Communication Policy
      tags:
      - Config - Communication Policies
  /config/networks:
    get:
      parameters:
      - description: "Flatten out the active, pending, and previous versions into\
          \ array elements instead of nesting them."
        in: query
        name: flatten
        schema:
          type: boolean
      - description: Provide extra details (in _extraInfo section) about the network.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: Get network associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get network associated with the specified tag. Provide ','(comma)\
          \ separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/network'
                type: array
          description: Successful operation
      summary: Get all Networks
      tags:
      - Config - Networks
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-network'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network'
          description: Network created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Network
      tags:
      - Config - Networks
  /config/networks/{id}:
    delete:
      parameters:
      - description: ID of the Network to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Network by ID
      tags:
      - Config - Networks
    get:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the network.
        in: query
        name: extraInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Network by ID
      tags:
      - Config - Networks
    patch:
      parameters:
      - description: ID of the Network to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_config_networks__id__patch_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update Network name or description
      tags:
      - Config - Networks
  /config/networks/{id}/active:
    get:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/active-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the active version for a Network
      tags:
      - Config - Networks
    patch:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: db6f0a2e-a368-4a97-91fb-cf3f61d72704
              type: string
        description: The version ID of the version to activate.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Activate pending or previous network version
      tags:
      - Config - Networks
    put:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-network'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the active Network version
      tags:
      - Config - Networks
  /config/networks/{id}/pending:
    delete:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the pending Network version
      tags:
      - Config - Networks
    get:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the pending version for a Network
      tags:
      - Config - Networks
    put:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-network'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the pending Network version
      tags:
      - Config - Networks
  /config/networks/{id}/previous:
    delete:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the previous Network version
      tags:
      - Config - Networks
    get:
      parameters:
      - description: ID of the Network
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previous-network'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the previous version for a Network
      tags:
      - Config - Networks
  /config/user-mappings:
    get:
      parameters:
      - description: Get user mapping associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user-mapping'
                type: array
          description: Successful operation
      summary: Get all User Mappings
      tags:
      - Config - User/Role Mappings
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-user-mapping'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-mapping'
          description: User Mapping created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new User Mapping
      tags:
      - Config - User/Role Mappings
  /config/user-mappings/{id}:
    delete:
      parameters:
      - description: ID of the User Mapping to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a User Mapping by ID
      tags:
      - Config - User/Role Mappings
    get:
      parameters:
      - description: ID of the User Mapping
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-mapping'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a User Mapping by ID
      tags:
      - Config - User/Role Mappings
    put:
      parameters:
      - description: ID of the DataCenter to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-user-mapping'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-mapping'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Update a User Mapping
      tags:
      - Config - User/Role Mappings
  /config/fabrics:
    get:
      parameters:
      - description: "Flatten out the active, pending, and previous versions into\
          \ array elements instead of nesting them."
        in: query
        name: flatten
        schema:
          type: boolean
      - description: Provide extra details (in _extraInfo section) about the fabric.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: Get fabric associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get fabric associated with the specified tag. Provide ','(comma)\
          \ separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/fabric'
                type: array
          description: Successful operation
      summary: Get all Fabrics
      tags:
      - Config - Fabrics
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-fabric'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fabric'
          description: Fabric created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Fabric
      tags:
      - Config - Fabrics
  /config/fabrics/{id}:
    delete:
      parameters:
      - description: ID of the Fabric to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Fabric by ID
      tags:
      - Config - Fabrics
    get:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the fabric.
        in: query
        name: extraInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Fabric by ID
      tags:
      - Config - Fabrics
    patch:
      parameters:
      - description: ID of the Fabric to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_config_fabrics__id__patch_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fabric'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update Fabric name or description
      tags:
      - Config - Fabrics
  /config/fabrics/{id}/active:
    get:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/active-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the active version for a Fabric
      tags:
      - Config - Fabrics
    patch:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: db6f0a2e-a368-4a97-91fb-cf3f61d72704
              type: string
        description: The version ID of the version to activate.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Activate pending or previous fabric version
      tags:
      - Config - Fabrics
    put:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-fabric'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the active Fabric version
      tags:
      - Config - Fabrics
  /config/fabrics/{id}/pending:
    delete:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the pending Fabric version
      tags:
      - Config - Fabrics
    get:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the pending version for a Fabric
      tags:
      - Config - Fabrics
    put:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-fabric'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the pending Fabric version
      tags:
      - Config - Fabrics
  /config/fabrics/{id}/previous:
    delete:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the previous Fabric version
      tags:
      - Config - Fabrics
    get:
      parameters:
      - description: ID of the Fabric
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previous-fabric'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the previous version for a Fabric
      tags:
      - Config - Fabrics
  /config/connectors:
    get:
      parameters:
      - description: "Flatten out the active, pending, and previous versions into\
          \ array elements instead of nesting them."
        in: query
        name: flatten
        schema:
          type: boolean
      - description: Provide extra details (in _extraInfo section) about the connector.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: The fabric versionId to use when providing _extraInfo.
        in: query
        name: fabricVersion
        schema:
          type: string
      - description: Get connector associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get connector associated with the specified tag. Provide ','(comma)\
          \ separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/connector'
                type: array
          description: Successful operation
      summary: Get all Connectors
      tags:
      - Config - Connectors
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-connector'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connector'
          description: Connector created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Connector
      tags:
      - Config - Connectors
  /config/connectors/{id}:
    delete:
      parameters:
      - description: ID of the Connector to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Connector by ID
      tags:
      - Config - Connectors
    get:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the connector.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: The fabric versionId to use when providing _extraInfo.
        in: query
        name: fabricVersion
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Connector by ID
      tags:
      - Config - Connectors
    patch:
      parameters:
      - description: ID of the Connector to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_config_connectors__id__patch_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connector'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update Connector name or description
      tags:
      - Config - Connectors
  /config/connectors/{id}/active:
    get:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/active-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the active version for a Connector
      tags:
      - Config - Connectors
    patch:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: db6f0a2e-a368-4a97-91fb-cf3f61d72704
              type: string
        description: The version ID of the version to activate.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Activate pending or previous connector version
      tags:
      - Config - Connectors
    put:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-connector'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the active Connector version
      tags:
      - Config - Connectors
  /config/connectors/{id}/pending:
    delete:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the pending Connector version
      tags:
      - Config - Connectors
    get:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the pending version for a Connector
      tags:
      - Config - Connectors
    put:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-connector'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the pending Connector version
      tags:
      - Config - Connectors
  /config/connectors/{id}/previous:
    delete:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the previous Connector version
      tags:
      - Config - Connectors
    get:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previous-connector'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the previous version for a Connector
      tags:
      - Config - Connectors
  /config/connectors/{id}/versions/{versionId}/drivers:
    get:
      parameters:
      - description: ID of the Connector
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: ID of the versioned Connector
        in: path
        name: versionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - 1asfadsf-4afd-7erf-dfbb-rt3jhnd6ghv
                - 15fd2337-980b-4d0f-951e-e6c848a81b5d
                items:
                  type: string
                type: array
          description: Successful Operation
        "404":
          description: Not Found
      summary: Get active drivers of a Connector
      tags:
      - Config - Connectors
  /config/links:
    get:
      parameters:
      - description: "Flatten out the active, pending, and previous versions into\
          \ array elements instead of nesting them."
        in: query
        name: flatten
        schema:
          type: boolean
      - description: Provide extra details (in _extraInfo section) about the link.
        in: query
        name: extraInfo
        schema:
          type: boolean
      - description: Get link associated with the specified name (case insensitive).
          Wildcard matching with '*' is supported.
        in: query
        name: filterByName
        required: false
        schema:
          type: string
      - description: "Get link associated with the specified tag. Provide ','(comma)\
          \ separated list of key:value pairs."
        in: query
        name: filterByTag
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/link'
                type: array
          description: Successful operation
      summary: Get all Links
      tags:
      - Config - Links
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-link'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link'
          description: Link created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create a new Link
      tags:
      - Config - Links
  /config/links/{id}:
    delete:
      parameters:
      - description: ID of the Link to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Link by ID
      tags:
      - Config - Links
    get:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Provide extra details (in _extraInfo section) about the link.
        in: query
        name: extraInfo
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Link by ID
      tags:
      - Config - Links
    patch:
      parameters:
      - description: ID of the Link to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_config_links__id__patch_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Update Link name or description
      tags:
      - Config - Links
  /config/links/{id}/active:
    get:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/active-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the active version for a Link
      tags:
      - Config - Links
    patch:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              example: db6f0a2e-a368-4a97-91fb-cf3f61d72704
              type: string
        description: The version ID of the version to activate.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Activate pending or previous link version
      tags:
      - Config - Links
    put:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-link'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the active Link version
      tags:
      - Config - Links
  /config/links/{id}/pending:
    delete:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the pending Link version
      tags:
      - Config - Links
    get:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the pending version for a Link
      tags:
      - Config - Links
    put:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-link'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Update the pending Link version
      tags:
      - Config - Links
  /config/links/{id}/previous:
    delete:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Delete the previous Link version
      tags:
      - Config - Links
    get:
      parameters:
      - description: ID of the Link
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previous-link'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config-version'
          description: Not Found
      summary: Get the previous version for a Link
      tags:
      - Config - Links
  /config/node-virtual-ips:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/node-virtual-ips-response'
                type: array
          description: Successful operation
      summary: Get all Node Virtual IPs objects
      tags:
      - Config - Node Virtual IPs
  /config/node-virtual-ips/{id}:
    delete:
      parameters:
      - description: ID of the Node Virtual IPs object to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful Operation
      summary: Delete a Node Virtual IPs object by ID
      tags:
      - Config - Node Virtual IPs
    get:
      parameters:
      - description: ID of the Node Virtual IPs object
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-virtual-ips-response'
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-config'
          description: Not Found
      summary: Get a Node Virtual IPs object by ID
      tags:
      - Config - Node Virtual IPs
    put:
      parameters:
      - description: ID of the Node Virtual IPs object to save or update. The value
          should match the Id of a QgNode object already present.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/node-virtual-ips-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-virtual-ips-response'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Save/Update a Node Virtual IPs object
      tags:
      - Config - Node Virtual IPs
  /shared-memory-estimator:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shared-memory-estimator-inputs'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The estimated shared memory required in bytes.
                type: number
          description: Estimate Returned
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Get an estimate of how much shared memory is required
      tags:
      - Operations - Shared Memory Estimator
  /operations/diagnostic-check:
    post:
      description: Request a diagnostic check or connector install.
      operationId: postDiagnosticCheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/diagnostic-check-request'
        description: The diagnostic check request
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diagnostic-check-request'
          description: Successfully able to register the diagnostic check operation.
        "400":
          description: Bad Request
      summary: Perform a diagnostic check or connector install
      tags:
      - Operations - Diagnostic Checks / Connector Install
  /operations/diagnostic-check/{diagnosticCheckId}:
    delete:
      description: Abort a diagnostic check based on the Id supplied
      operationId: deleteDiagnosticCheckById
      parameters:
      - description: Id of diagnostic check that needs to be aborted. Applicable only
          for LINK_BANDWIDTH check.
        in: path
        name: diagnosticCheckId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Abort requested for the specified diagnostic check operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Abort a diagnostic check or connector install
      tags:
      - Operations - Diagnostic Checks / Connector Install
    get:
      description: Get the diagostic check status using the Id.
      operationId: getDiagnosticCheckById
      parameters:
      - description: Id of diagnostic check operation.
        in: path
        name: diagnosticCheckId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diagnostic-check-response'
          description: successful operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-diagnostic-check'
          description: Diagnostic Check operation status not found
      summary: Get the status of a diagnostic check or connector install.
      tags:
      - Operations - Diagnostic Checks / Connector Install
  /operations/nodes-manual-install:
    post:
      description: Install the node package manually.
      operationId: postNodeManualInstall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manual-install-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/install-config-file'
          description: successful operation
      summary: Manual node installation
      tags:
      - Operations - Nodes Manual Install
  /operations/nodes-auto-install:
    post:
      description: Install the node package automatically.
      operationId: postNodeAutoInstall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auto-install-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auto-install-response'
          description: Successful Operation
      summary: Automatic node installation
      tags:
      - Operations - Nodes Auto Install
  /operations/nodes-auto-install/{installationId}:
    delete:
      description: Abort  the auto-install operation using installationId
      operationId: deleteNodeAutoInstallById
      parameters:
      - description: Id of the auto-install operation.
        in: path
        name: installationId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Auto-install operation aborted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Abort automatic node installation operation
      tags:
      - Operations - Nodes Auto Install
    get:
      description: Get the status of the automatic node installation status using
        installationId
      operationId: postNodeAutoInstallById
      parameters:
      - description: Id of the auto-install operation.
        in: path
        name: installationId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auto-install-response'
          description: Successful Operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Specified installationId not found
      summary: Automatic node installation status
      tags:
      - Operations - Nodes Auto Install
  /operations/import-system:
    post:
      description: Request to import a system.
      operationId: postImportSystem
      parameters:
      - description: Only validate the import system request. Do not run the actual
          import operation.
        example: true
        in: query
        name: dryRun
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/import-system-request'
        description: Request body for importing a system.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/import-system-response'
          description: Successfully able to register the ADD_CLUSTER diagnostic check
            operation.
        "400":
          description: Bad Request
      summary: Issue a request to import a system from a remote QGM cluster.
      tags:
      - Operations - Import System
  /operations/import-system/{diagnosticCheckId}:
    post:
      description: Get the ADD_CLUSTER diagostic check status using the Id.
      operationId: getImportSystemDiagnosticCheckById
      parameters:
      - description: Id of diagnostic check operation.
        in: path
        name: diagnosticCheckId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manager-credentials'
        description: Credentials of the remote manager to fetch the status of the
          diagnostic check.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diagnostic-check-response'
          description: successful operation
        "400":
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-import-system'
          description: ADD_CLUSTER Diagnostic Check operation status not found
      summary: Get the status of the ADD_CLUSTER diagnostic check issues as a part
        of import system operation.
      tags:
      - Operations - Import System
  /operations/create-foreign-server:
    post:
      description: Request to create a foreign server
      operationId: postCreateForeignServer
      parameters:
      - description: Only validate the create foreign server request. Do not run the
          actual create foreign server operation.
        example: true
        in: query
        name: dryRun
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-foreign-server-request'
        description: Request body for creating a foreign server.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-foreign-server-response'
          description: Successfully registered the CONNECTOR_CFS diagnostic check
            operation.
        "400":
          description: Bad Request
      summary: Issue a request to create a foreign server for a link
      tags:
      - Operations - Create Foreign Server
  /operations/create-foreign-server/{diagnosticCheckId}:
    get:
      description: Get the status of the CONNECTOR_CFS diagnostic check(s) issued
        as a part of create-foreign-server operation using the id.
      operationId: getConnectorCFSDiagnosticCheckById
      parameters:
      - description: diagnosticCheckId of CONNECTOR_CFS diagnostic check(s).
        in: path
        name: diagnosticCheckId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diagnostic-check-response'
          description: successful operation
        "400":
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/not-found-diagnostic-check'
          description: CONNECTOR_CFS Diagnostic Check operation status not found
      summary: Get the status of the CONNECTOR_CFS diagnostic check(s) issued as a
        part of create-foreign-server operation
      tags:
      - Operations - Create Foreign Server
  /operations/bulk-delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulk-delete-request'
      responses:
        "200":
          description: Configuration objects were deleted successfully.
        "400":
          description: Bad Request
      summary: Bulk delete configuration objects.
      tags:
      - Operations - Bulk Delete
  /operations/register-remote-lake-system:
    post:
      description: Register current system nodes to remote lake system using ADD_CLUSTER
        diagnostic check
      operationId: postRegisterRemoteLakeSystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/install-config-file_1'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/diagnostic-check-response'
          description: Successful Operation
      summary: Register current system nodes to remote lake system
      tags:
      - Operations - Register Remote Lake System
  /operations/datasource-registration:
    get:
      description: Generate node registration zip file for a given data source
      parameters:
      - description: "Name of the data source type. E.g. emr, dataproc, hdinsight,\
          \ genericjdbc, cdp, bigquery, onpremtd"
        in: query
        name: datasourceType
        required: true
        schema:
          type: string
      - description: ID of the system
        in: query
        name: systemId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response to download the datasource registration
            zip file.
      summary: Generate node registration zip file for a datasource
      tags:
      - Operations - Data Source Registration File
  /operations/privatelink-template:
    get:
      description: Generate private link template file for a given cloud platform
      parameters:
      - description: "Name of the cloud platform. E.g. aws, azure, gc"
        in: query
        name: cloudPlatform
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful response to download the datasource registration
            zip file.
      summary: Generate private link template file for a given cloud platform
      tags:
      - Operations - Private Link Template
  /operations/system-alerts/disable:
    post:
      description: "Disable alerts for a non-lake system (VCE, OnPrem, etc.) for a\
        \ specific issue type. Note - Currently, this is only supported for the \"\
        NODES_OFFLINE\" issue type."
      operationId: postDisableSystemAlerts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/system-alerts-request'
      responses:
        "200":
          description: Successful Operation
        "400":
          description: Bad Request
      summary: Disable system alerts for a specific issue type
      tags:
      - Operations - Disable System Alerts
  /support-archive/manager:
    get:
      description: Generate and download manager support archive containing QGM logs
        and other information.
      parameters:
      - description: The start of the time range to collect logs in ISO8601 format.
        in: query
        name: start-time
        required: false
        schema:
          type: string
      - description: The end of the time range to collect logs in ISO8601 format.
        in: query
        name: end-time
        required: false
        schema:
          type: string
      - description: "The number of days back to include log files, defaults to 7."
        in: query
        name: days
        required: false
        schema:
          type: string
      - description: The number of hours back to include log files.
        in: query
        name: hours
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful Operation
        "507":
          description: QueryGrid Manager is running low on disk space.
      summary: Generate manager support archive
      tags:
      - Support-Archive
  /support-archive/query:
    get:
      description: Generate and download query support archive containing query summary
        and query details.
      parameters:
      - description: Generate a support archive for a specific query Id.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: Collect support information for all operations associated with
          the specified query Id.
        in: query
        name: all
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                type: object
          description: Unable to or skipped generation of support archive.
        "507":
          description: QueryGrid Manager is running low on disk space.
      summary: Generate query support archive
      tags:
      - Support-Archive
  /support-archive/config:
    get:
      description: Generate config support archive containing config information collected
        from QGM.
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful Operation
        "507":
          description: QueryGrid Manager is running low on disk space.
      summary: Generate config support archive
      tags:
      - Support-Archive
  /support-archive/node:
    get:
      description: Generate and download node support archive containing node logs.
      parameters:
      - description: The start of the time range to collect logs in ISO8601 format.
        in: query
        name: start-time
        required: false
        schema:
          type: string
      - description: The end of the time range to collect logs in ISO8601 format.
        in: query
        name: end-time
        required: false
        schema:
          type: string
      - description: "The number of days back to include log files, defaults to 7."
        in: query
        name: days
        required: false
        schema:
          type: string
      - description: The number of hours back to include log files.
        in: query
        name: hours
        required: false
        schema:
          type: string
      - description: Id or the hostname of a specific node.
        in: query
        name: node
        required: false
        schema:
          type: string
      - description: Generate node-logs support archive for a specific system name.
        in: query
        name: system-name
        required: false
        schema:
          type: string
      - description: "The number of threads to use for collecting node logs, defaults\
          \ to 10."
        in: query
        name: threads
        required: false
        schema:
          type: integer
      - description: "Generate node-logs support archive for a specific sender. Examples\
          \ - [node, fabric, connector]"
        in: query
        name: sender
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                type: object
          description: Unable to or skipped generation of support archive.
        "507":
          description: QueryGrid Manager is running low on disk space.
      summary: Generate node support archive
      tags:
      - Support-Archive
  /support-archive/diagnostic-check:
    get:
      description: Generate and download diagnostic check support archive.
      parameters:
      - description: Generate a support archive for a specific diagnostic check Id.
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful Operation
        "404":
          content:
            application/json:
              schema:
                type: object
          description: Unable to or skipped generation of support archive.
        "507":
          description: QueryGrid Manager is running low on disk space.
      summary: Generate diagnostic check support archive
      tags:
      - Support-Archive
  /operations/datasource:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post-datasource'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
          description: System created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad-request'
          description: Bad Request
      summary: Create Data Source
      tags:
      - Operations - Add Data Source
components:
  schemas:
    api-info:
      example:
        features:
          roleMapping: true
          proxy: true
          multipleClusters: true
          bulkDelete: true
          memoryCalculator: true
          autoNodeDelete: true
          bridge: true
          bulkNodeDelete: true
        appVersion: 02.04.00.01
        instanceId: cfd5724f-31bf-4296-98b4-2a1fc8ab9a6f
        apiVersion: "1"
        timestamp: 2018-01-12T00:09:53.635+0000
      properties:
        instanceId:
          description: The unique identifer assigned to this QueryGrid Manager instance
          example: cfd5724f-31bf-4296-98b4-2a1fc8ab9a6f
          type: string
        appVersion:
          description: The QueryGrid Manager software version
          example: 02.04.00.01
          type: string
        apiVersion:
          description: The latest API version supported by this QueryGrid Manager
            instance
          example: "1"
          type: string
        timestamp:
          description: The current timestamp of the QueryGrid Manager at the time
            of the response in ISO-8601 format.
          example: 2018-01-12T00:09:53.635+0000
          type: string
        features:
          $ref: '#/components/schemas/api_info_features'
      type: object
    issue:
      example:
        severity: CRITICAL
        componentType: SYSTEM
        componentId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        configVersion: ACTIVE
        dataCenterName: DataCenter1
        subjectParams:
        - system1
        - 4
        messageParams:
        - system1
        - 4
        messageLabel: issue.system.NODES_OFFLINE.message
        nodeIds:
        - 0bfe8c3c-2d52-4818-872b-babafbd252cc
        - 538f5fcd-b283-4081-a2ab-05d8a222e2b8
        createTime: 2000-01-23T04:56:07.000+00:00
        subcomponentId: 4b6efbe1-b5ee-4466-bcb1-a0c5cbcbda3d
        reporterId: ac9cb7e4-3578-4499-814b-e871f8d9c3cf
        id: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        lastModified: 2000-01-23T04:56:07.000+00:00
        componentName: System1
        subjectLabel: issue.system.NODES_OFFLINE.subject
        problemType: NODES_OFFLINE
      properties:
        id:
          description: Id of the issue
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        lastModified:
          description: The last time this object was modified
          format: date-time
          type: string
        createTime:
          description: The time the issue was created.
          format: date-time
          type: string
        componentType:
          description: The type of component the issue applies to (e.g. SYSTEM or
            MANAGER).
          enum:
          - SYSTEM
          - MANAGER
          - SOFTWARE
          example: SYSTEM
          type: string
        componentId:
          description: Id of the component the issue is associated with
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        componentName:
          description: Id of the component the issue is associated with
          example: System1
          type: string
        dataCenterName:
          description: The name of the data center the component is located in.
          example: DataCenter1
          type: string
        problemType:
          description: The reason for the issue.
          enum:
          - NODES_MISSING
          - NODES_OFFLINE
          - NODES_WRONG_TIME
          - NODES_WRONG_VERSION
          - FABRIC_OFFLINE
          - DRIVERS_OFFLINE
          - FABRIC_HEARTBEAT_MISSING
          - CONNECTOR_MISSING
          - MANAGER_OFFLINE
          - MANAGER_WRONG_TIME
          - MANAGER_BACKUP_FAILED
          - MANAGER_DISK_SPACE_LOW
          - MANAGER_VERSION_MISMATCH
          - LINK_MISSING
          - NODES_NETWORK_MISMATCH
          - FABRIC_RESTART
          - DRIVER_RESTART
          - LINK_NAME_CONFLICT
          - FABRIC_PORT_CONFLICT
          - USAGE_REPORT_FAILURE
          - PRIMARY_CLUSTER_INCONSISTENT
          - PROXY_ERROR
          - AUTO_NODE_DELETE
          - CERTIFICATE_AUTHORITY_EXPIRING
          - SERVER_CERTIFICATE_EXPIRING
          - CUSTOM_CERTIFICATE_EXPIRING
          - CLOUD_INSTALL_CHECKUP_FAILED
          - OVERRIDE_PORT_ERROR
          - SUCCESSFUL_MANAGER_UPGRADE
          - NODE_LOGS_BACKUP_FAILED
          - UNBUNDLED_JDBCDRIVER_SOFTWARE
          example: NODES_OFFLINE
          type: string
        severity:
          description: The severity for the issue.
          enum:
          - WARNING
          - CRITICAL
          example: CRITICAL
          type: string
        subjectLabel:
          description: The language independent label to use to lookup the language
            specific issue subject.
          example: issue.system.NODES_OFFLINE.subject
          type: string
        subjectParams:
          description: The parameters to the issue subject
          example:
          - system1
          - 4
          items:
            type: string
          type: array
        messageLabel:
          description: The language independent label to use to lookup the language
            specific issue message.
          example: issue.system.NODES_OFFLINE.message
          type: string
        messageParams:
          description: The parameters to the issue message
          example:
          - system1
          - 4
          items:
            type: string
          type: array
        configVersion:
          description: "The logical version of the component (e.g. ACTIVE, PENDING,\
            \ PREVIOUS) the issue applies to, null if not applicable."
          enum:
          - ACTIVE
          - PENDING
          - PREVIOUS
          type: string
        reporterId:
          description: The ID of the manager that reporte the issue.
          example: ac9cb7e4-3578-4499-814b-e871f8d9c3cf
          type: string
        subcomponentId:
          description: "The ID of the subcomponent the issue applies to (e.g. Fabric,\
            \ Connector, Link, etc.)"
          example: 4b6efbe1-b5ee-4466-bcb1-a0c5cbcbda3d
          type: string
        nodeIds:
          description: The node IDs the issue applies to (null if not appliable)
          example:
          - 0bfe8c3c-2d52-4818-872b-babafbd252cc
          - 538f5fcd-b283-4081-a2ab-05d8a222e2b8
          items:
            type: string
          type: array
      type: object
    post-issue:
      properties:
        problemType:
          description: Type of the issue
          enum:
          - SUCCESSFUL_QGM_UPGRADE
          type: string
        componentType:
          description: Type of the component having the issue
          enum:
          - MANAGER
          type: string
        messageParams:
          description: The parameters to the issue message
          example:
          - "02.19"
          - "02.20"
          items:
            type: string
          type: array
      type: object
    bad-request:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 400
        error:
          description: The error description
          example: Bad Request
        message:
          description: The error message
          example: "[name must not be blank]"
        path:
          description: The path of the API called
          example: /api/v1/config/<type>
      type: object
    not-found-entity:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 404
        error:
          description: The error description
          example: Not Found
        message:
          description: The error message
          example: No <entity type> with id=15fd2337-980b-4d0f-951e-e6c848a81b5d found.
        path:
          description: The path of the API called
          example: /api/v1/<type>/15fd2337-980b-4d0f-951e-e6c848a81b5d
        errorCode:
          description: The error code for localization
          example: api.error.entity.not.found
        errorParams:
          description: Parameters for localization
          example:
          - api.error.param.entity.type.<entity type>
          - 15fd2337-980b-4d0f-951e-e6c848a81b5d
          items:
            type: string
          type: array
      type: object
    manager:
      example:
        hostname: hostname
        networkInterfaces:
        - prefixLength: 16
          address: 169.254.169.254
          name: eth0
        - prefixLength: 16
          address: 169.254.169.254
          name: eth0
        dataCenterId: c73cfabf-2db9-4054-bfbe-9c823b8797e7
        publicAddress: 10.10.10.10
        startTime: 2000-01-23T04:56:07.000+00:00
        additionalPublicAddresses:
        - additionalPublicAddresses
        - additionalPublicAddresses
        id: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        lastModified: 2000-01-23T04:56:07.000+00:00
        version: 02.04.00.02-19
        _extraInfo:
          lastHeartbeat: 2000-01-23T04:56:07.000+00:00
          freeSpace: 149786984448
          diskUsage: 44.2
          dataCenterName: San Diego
          totalSpace: 268435456000
          status: ONLINE
        bindAddress: 10.10.10.10
        clusterAddress: 10.10.10.10
      properties:
        id:
          description: Id of the manager
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        lastModified:
          description: The last time this object was modified
          format: date-time
          type: string
        hostname:
          description: The hostname of the manager
          type: string
        networkInterfaces:
          description: The network interfaces associated with the manager
          items:
            $ref: '#/components/schemas/manager_networkInterfaces_inner'
          type: array
        dataCenterId:
          description: The ID of the data center the manager is associated with
          example: c73cfabf-2db9-4054-bfbe-9c823b8797e7
          type: string
        version:
          description: The version of the tdqg-manager software.
          example: 02.04.00.02-19
          type: string
        publicAddress:
          description: "The internet address or hostname used by tdqg-node, tdqg-fabric,\
            \ and viewpoint to access the QGM."
          example: 10.10.10.10
        clusterAddress:
          description: The internet address other QGMs used to access this instance.
          example: 10.10.10.10
        bindAddress:
          description: The internet address that certain QGM services are bound.
          example: 10.10.10.10
        startTime:
          description: The time the Manager was last started
          format: date-time
          type: string
        additionalPublicAddresses:
          description: A list of additional public addresses to associate with the
            QueryGrid Manager instance.
          items:
            type: string
          type: array
        _extraInfo:
          $ref: '#/components/schemas/manager__extraInfo'
      type: object
    node:
      example:
        hostname: hostname
        systemId: c73cfabf-2db9-4054-bfbe-9c823b8797e7
        aliases:
        - aliases
        - aliases
        networkInterfaces:
        - prefixLength: 16
          address: 169.254.169.254
          name: eth0
        - prefixLength: 16
          address: 169.254.169.254
          name: eth0
        attributes: "{}"
        id: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        lastModified: 2000-01-23T04:56:07.000+00:00
        _extraInfo:
          systemName: TD1
          startTime: 2000-01-23T04:56:07.000+00:00
          dataCenterName: San Diego
          softwareVersion: 02.04.00.02-11
          status: ONLINE
        platform: linux-x64
      properties:
        id:
          description: Id of the node
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        lastModified:
          description: The last time this object was modified
          format: date-time
          type: string
        hostname:
          description: The hostname of the node
          type: string
        aliases:
          description: Any aliases associated with the node
          items:
            type: string
          type: array
        platform:
          description: The node's OS/Arch
          example: linux-x64
          type: string
        attributes:
          description: The nodes attributes as determined by the QGL
          type: object
        systemId:
          description: The ID of the system the node is associated with
          example: c73cfabf-2db9-4054-bfbe-9c823b8797e7
          type: string
        networkInterfaces:
          description: The network interfaces associated with the node
          items:
            $ref: '#/components/schemas/manager_networkInterfaces_inner'
          type: array
        _extraInfo:
          $ref: '#/components/schemas/node__extraInfo'
      type: object
    watchdog-heartbeat:
      example:
        connectors:
        - versionId: 2e2ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          softwareName: tdqg-teradata-connector-02.13.00.00-1.tar.gz
          connectorVersion: ACTIVE
          errorMessage: Unable to install
          connectorName: conenctor-test-name
          softwareVersion: 02.13.00.00-1
          fabricName: fabric-test-name
          status: installed
        - versionId: 2e2ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          softwareName: tdqg-teradata-connector-02.13.00.00-1.tar.gz
          connectorVersion: ACTIVE
          errorMessage: Unable to install
          connectorName: conenctor-test-name
          softwareVersion: 02.13.00.00-1
          fabricName: fabric-test-name
          status: installed
        systemId: c73cfabf-2db9-4054-bfbe-9c823b8797e7
        overridePortError: overridePortError
        received: 2000-01-23T04:56:07.000+00:00
        version: version
        trustedCertificates:
        - trustedCertificates
        - trustedCertificates
        fabrics:
        - versionId: 2d1ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          processId: "4708"
          errorMessage: Fabric restarted
          lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
          version: ACTIVE
          drivers:
          - processId: "5508"
            errorMessage: Driver restarted
            driverName: driver-test-name
            lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
            status: running
          - processId: "5508"
            errorMessage: Driver restarted
            driverName: driver-test-name
            lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
            status: running
          softwareVersion: 02.13.00.00-1
          fabricName: fabric-test-name
          status: running
        - versionId: 2d1ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          processId: "4708"
          errorMessage: Fabric restarted
          lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
          version: ACTIVE
          drivers:
          - processId: "5508"
            errorMessage: Driver restarted
            driverName: driver-test-name
            lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
            status: running
          - processId: "5508"
            errorMessage: Driver restarted
            driverName: driver-test-name
            lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
            status: running
          softwareVersion: 02.13.00.00-1
          fabricName: fabric-test-name
          status: running
        hostname: hostname
        instanceId: 2018-02-25T20:36:31.121+0000
        systemName: system-test-name
        lastModified: 2000-01-23T04:56:07.000+00:00
        nodeId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        managers:
        - fabricPortConflicts:
          - port: 5000
            fabricVersion: ACTIVE
            fabricName: fabric-test-name
          - port: 5000
            fabricVersion: ACTIVE
            fabricName: fabric-test-name
          addresses:
          - sdlc1111.labs.teradata.com
          - sdlc2222.labs.teradata.com
          linkNameConflicts:
          - linkName: link-test-name
            fabricName: fabric-test-name
          - linkName: link-test-name
            fabricName: fabric-test-name
          clusterId: 3f3ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          primary: true
        - fabricPortConflicts:
          - port: 5000
            fabricVersion: ACTIVE
            fabricName: fabric-test-name
          - port: 5000
            fabricVersion: ACTIVE
            fabricName: fabric-test-name
          addresses:
          - sdlc1111.labs.teradata.com
          - sdlc2222.labs.teradata.com
          linkNameConflicts:
          - linkName: link-test-name
            fabricName: fabric-test-name
          - linkName: link-test-name
            fabricName: fabric-test-name
          clusterId: 3f3ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          primary: true
        timestamp: 2018-02-25T20:36:31.121+0000
        proxyError: proxyError
      properties:
        nodeId:
          description: Id of the node
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        timestamp:
          description: The time of the heartbeat generation
          example: 2018-02-25T20:36:31.121+0000
        instanceId:
          description: The manager configuration instance Id
          example: 2018-02-25T20:36:31.121+0000
        lastModified:
          description: The last observed configuration timestamp
          format: date-time
          type: string
        version:
          description: The watch dog version
          type: string
        fabrics:
          description: Information about fabrics associated with the node
          items:
            $ref: '#/components/schemas/fabric-status'
          type: array
        connectors:
          description: Information about connectors associated with the node
          items:
            $ref: '#/components/schemas/connector-status'
          type: array
        managers:
          description: Information about manager clusters associated with the node
          items:
            $ref: '#/components/schemas/manager-status'
          type: array
        received:
          description: The time when heartbeat was received by manager
          format: date-time
          type: string
        systemId:
          description: The ID of the system the node is associated with
          example: c73cfabf-2db9-4054-bfbe-9c823b8797e7
          type: string
        systemName:
          description: The name of the system the node is associated with
          example: system-test-name
          type: string
        hostname:
          description: The hostname of the node
          type: string
        proxyError:
          description: The error while using proxy
          type: string
        overridePortError:
          description: The error while using an override port
          type: string
        trustedCertificates:
          description: List of trusted certificates used by the node
          items:
            type: string
          type: array
      type: object
    fabric-status:
      example:
        versionId: 2d1ddd4d-7c30-47ed-bbf1-77806fe7e6a9
        processId: "4708"
        errorMessage: Fabric restarted
        lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
        version: ACTIVE
        drivers:
        - processId: "5508"
          errorMessage: Driver restarted
          driverName: driver-test-name
          lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
          status: running
        - processId: "5508"
          errorMessage: Driver restarted
          driverName: driver-test-name
          lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
          status: running
        softwareVersion: 02.13.00.00-1
        fabricName: fabric-test-name
        status: running
      properties:
        fabricName:
          description: Name of the fabric
          example: fabric-test-name
          type: string
        version:
          description: Version of the fabric
          enum:
          - ACTIVE
          - PENDING
          - PREVIOUS
          type: string
        softwareVersion:
          description: Version of the fabric package
          example: 02.13.00.00-1
          type: string
        versionId:
          description: Id of the versioned fabric
          example: 2d1ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          type: string
        status:
          description: Status of the fabric
          example: running
          type: string
        processId:
          description: Process Id of the fabric
          example: "4708"
          type: string
        errorMessage:
          description: Error observed by the fabric
          example: Fabric restarted
          type: string
        lastUnexpectedRestart:
          description: The time of the last fabric restart
          example: 2018-02-25T20:36:31.121+0000
          format: date-time
        drivers:
          description: The status of drivers associated with the fabric
          items:
            $ref: '#/components/schemas/driver-status'
          type: array
      type: object
    driver-status:
      example:
        processId: "5508"
        errorMessage: Driver restarted
        driverName: driver-test-name
        lastUnexpectedRestart: 2018-02-25T20:36:31.121+0000
        status: running
      properties:
        driverName:
          description: Name of the driver
          example: driver-test-name
          type: string
        status:
          description: Status of the driver
          example: running
          type: string
        processId:
          description: Process Id of the fabric
          example: "5508"
          type: string
        errorMessage:
          description: Error observed by the driver
          example: Driver restarted
          type: string
        lastUnexpectedRestart:
          description: The time of the last driver restart
          example: 2018-02-25T20:36:31.121+0000
          format: date-time
      type: object
    connector-status:
      example:
        versionId: 2e2ddd4d-7c30-47ed-bbf1-77806fe7e6a9
        softwareName: tdqg-teradata-connector-02.13.00.00-1.tar.gz
        connectorVersion: ACTIVE
        errorMessage: Unable to install
        connectorName: conenctor-test-name
        softwareVersion: 02.13.00.00-1
        fabricName: fabric-test-name
        status: installed
      properties:
        versionId:
          description: Id of the versioned connector
          example: 2e2ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          type: string
        connectorName:
          description: Name of the connector
          example: conenctor-test-name
          type: string
        connectorVersion:
          description: Version of the connector
          enum:
          - ACTIVE
          - PENDING
          - PREVIOUS
          type: string
        softwareName:
          description: Name of the connector package
          example: tdqg-teradata-connector-02.13.00.00-1.tar.gz
          type: string
        softwareVersion:
          description: Version of the connector package
          example: 02.13.00.00-1
          type: string
        fabricName:
          description: Name of the fabric using this connector
          example: fabric-test-name
          type: string
        status:
          description: Status of the connector
          example: installed
          type: string
        errorMessage:
          description: Error observed by the connector
          example: Unable to install
          type: string
      type: object
    manager-status:
      example:
        fabricPortConflicts:
        - port: 5000
          fabricVersion: ACTIVE
          fabricName: fabric-test-name
        - port: 5000
          fabricVersion: ACTIVE
          fabricName: fabric-test-name
        addresses:
        - sdlc1111.labs.teradata.com
        - sdlc2222.labs.teradata.com
        linkNameConflicts:
        - linkName: link-test-name
          fabricName: fabric-test-name
        - linkName: link-test-name
          fabricName: fabric-test-name
        clusterId: 3f3ddd4d-7c30-47ed-bbf1-77806fe7e6a9
        primary: true
      properties:
        clusterId:
          description: Id of the manager cluster
          example: 3f3ddd4d-7c30-47ed-bbf1-77806fe7e6a9
          type: string
        primary:
          description: Flag to specify if this manager is acting as primary manager
            for the node
          example: true
          type: boolean
        addresses:
          description: Addresses of the managers in the cluster
          example:
          - sdlc1111.labs.teradata.com
          - sdlc2222.labs.teradata.com
          items:
            type: string
          type: array
        fabricPortConflicts:
          description: Information about fabric port conflicts
          items:
            $ref: '#/components/schemas/fabric-port-conflict-status'
          type: array
        linkNameConflicts:
          description: Information about link name conflicts
          items:
            $ref: '#/components/schemas/link-name-conflict-status'
          type: array
      type: object
    fabric-port-conflict-status:
      example:
        port: 5000
        fabricVersion: ACTIVE
        fabricName: fabric-test-name
      properties:
        fabricName:
          description: Name of the fabric
          example: fabric-test-name
          type: string
        port:
          description: Port with conflict
          example: 5000
          type: integer
        fabricVersion:
          description: Version of the fabric
          enum:
          - ACTIVE
          - PENDING
          - PREVIOUS
          type: string
      type: object
    link-name-conflict-status:
      example:
        linkName: link-test-name
        fabricName: fabric-test-name
      properties:
        linkName:
          description: Name of the link
          example: link-test-name
          type: string
        fabricName:
          description: Name of the fabric
          example: fabric-test-name
          type: string
      type: object
    query-summary:
      example:
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        parentId: null
        siblingId: 3823b87b-e215-4196-a8d9-f42916472446
        childrenId: null
        lastModified: 2022-08-16T06:28:23.498+0000
        phase: SUCCESS
        startTime: 2022-08-16T06:27:32.402+0000
        endTime: 2022-08-16T06:27:33.033+0000
        duration: 631
        transferType: IMPORT
        rowsTransferred: 10
        bytesTransferred: 203
        compressionRatio: 1.3793104
        transferRate: 4319
        bottleneck:
          location: null
          node: null
        configVersion: ACTIVE
        link:
          id: b5531ad0-3788-48fe-b250-dca66a49245b
          name: sdt34770_sdt34793
          version: ACTIVE
          versionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
        fabric:
          id: 723a7d93-7168-4c58-8c61-0583e0273857
          name: test_fabric_01
          version: ACTIVE
          versionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          port: 5001
          softwareVersion: 02.19.00.00-1
        commPolicy:
          id: 29315420-d1ef-4352-ae6e-9da5927a1296
          name: test_comm_policies_01
          version: ACTIVE
          versionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
          compression: true
          encryption: true
        initiator:
          system:
            id: 140d868e-e00d-4da9-9492-95447458ab67
            name: sdt34770
          connector:
            id: 9a49b2f4-7dd8-42c0-ac6b-bb0663d38b4c
            name: sdt34770
            version: ACTIVE
            versionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
            softwareName: tdqg-teradata-connector
            softwareVersion: 02.19.00.00-2
          network:
            id: 72fe8964-f48b-4958-8158-521a0b7d2279
            name: test_network_td_vm
            version: ACTIVE
            versionId: a5ab1592-c146-4733-9f56-96cf099c7db6
          queryText:
          - "select c_ID, c_G_Boolean_0, c_G_Date_0, c_G_Array_0 from TESTUSER.remote_tab@T2T;"
          username: TESTUSER
          userRole: null
          hostId: "1"
          requestId: "7"
          sessionId: "2554"
          queryId: "307191888041164409"
          totalCpu: 0
          metadataPhase:
            startTime: 2022-08-16T06:27:32.402+0000
            endTime: 2022-08-16T06:27:32.816+0000
            duration: 414
            totalCpu: null
            bytesTransferred: null
            node:
              id: 740b4af8-9c9f-42be-a5d4-d68726041d14
              name: sdt34770
            instances:
            - startTime: 2022-08-16T06:27:32.402+0000
              endTime: 2022-08-16T06:27:32.816+0000
              duration: 414
              totalCpu: null
              bytesTransferred: null
              node:
                id: 740b4af8-9c9f-42be-a5d4-d68726041d14
                name: sdt34770
          executionPhase:
            startTime: 2022-08-16T06:27:32.868+0000
            endTime: 2022-08-16T06:27:33.033+0000
            duration: 165
            totalCpu: null
            node:
              id: 740b4af8-9c9f-42be-a5d4-d68726041d14
              name: sdt34770
            instances:
            - startTime: 2022-08-16T06:27:32.868+0000
              endTime: 2022-08-16T06:27:33.033+0000
              duration: 165
              totalCpu: null
              node:
                id: 740b4af8-9c9f-42be-a5d4-d68726041d14
                name: sdt34770
              type: QGC_MODE_IMPORT
          dataTransferPhase:
            startTime: 2022-08-16T06:27:32.868+0000
            endTime: 2022-08-16T06:27:33.036+0000
            duration: 168
            totalCpu: 0
            totalNodes: 1
            cpuSkew: 1
            highestCpuNode:
              id: 740b4af8-9c9f-42be-a5d4-d68726041d14
              name: sdt34770
            dataSkew: 1
            highestDataNode:
              id: 740b4af8-9c9f-42be-a5d4-d68726041d14
              name: sdt34770
            bytesTransferred: 203
            compressedSize: 203
            decompressedSize: 280
          errors: null
          warnings: null
        target:
          system:
            id: 983b37cb-8fe6-491d-8df0-6cd180764e6e
            name: sdt34793
          connector:
            id: ad99f859-9d99-4338-bd35-10dc3308229e
            name: sdt34793
            version: ACTIVE
            versionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
            softwareName: tdqg-teradata-connector
            softwareVersion: 02.19.00.00-2
          network:
            id: 72fe8964-f48b-4958-8158-521a0b7d2279
            name: test_network_td_vm
            version: ACTIVE
            versionId: a5ab1592-c146-4733-9f56-96cf099c7db6
          queryText:
          - HELP COLUMN * FROM "TESTUSER"."remote_tab";SELECT session
          - "SELECT * FROM TD_SYSFNLIB.QGRemoteExport(ON(SELECT c_ID ,c_G_Array_0\
            \ ,c_G_Boolean_0 ,c_G_Date_0  FROM TESTUSER.remote_tab ) USING uuid('3823b87b-e215-4196-a8d9-f42916472446')\
            \ QGLVersionId('362c97e5-b4ad-4a7c-be9e-06399aeb058d;1e8e3d6b-1b38-473b-99c0-9b5811686220;4e9a4775-3e45-4a13-bab2-a266a17c762a;d9f942c4-9d41-4d88-bc4c-2ede1fe43e74;3d0214c3-5643-4539-ab0d-45fc9bd74933;a5ab1592-c146-4733-9f56-96cf099c7db6;a5ab1592-c146-4733-9f56-96cf099c7db6')\
            \ connectionMaxIdleTime('86400') defaultPushProfile('NONE') tlsPort('443')\
            \ replaceUnsupportedUC('false') logfilePath('/var/opt/teradata/tdqg/connector/tdqg-teradata-connector/02.19.00.00-2/logs/5001/')\
            \ connectionPoolSize('100') loaderConnectorName('libtdqgc.so') linkBufferCount('4')\
            \ connectorPath('/opt/teradata/tdqg/connector/tdqg-teradata-connector/02.19.00.00-2/lib/')\
            \ linkBufferSize('1048576') validateUnsupportedUC('false') enableAsyncAbort('false')\
            \ unsupportedDataType('Cast to Varchar') gssJar('/usr/tdbms/bin/tdgssconfig.jar')\
            \ disablePushdown('false') fabricPath('/opt/teradata/tdqg/fabric/02.19.00.00-1/driver/')\
            \ remoteConnectorName('') byteCountReportFrequency('640000') responseTimeout('86400000')\
            \ transactionMode('TERA') roleSupport('false') jdbcJar('/usr/tdbms/bin/terajdbc4.jar')\
            \ useTrusted('false') shmPath('/dev/shm/td_qg_ipc/5001/uds') connectorName('teradata')\
            \ evictPeriodMin('30') enableJdbcTLS('false') enableLogging('DEBUG') ifs('[{\"\
            t\":1,\"l\":4,\"p\":4},{\"t\":20,\"l\":60,\"p\":60},{\"t\":3,\"l\":1,\"\
            p\":1},{\"t\":13,\"l\":4,\"p\":4}]')) AS dt;SELECT session"
          username: TESTUSER
          userRole: null
          hostId: "1"
          requestId: "19"
          sessionId: "2688"
          queryId: "307191388101572517"
          totalCpu: 20
          metadataPhase:
            startTime: 2022-08-16T06:27:32.619+0000
            endTime: 2022-08-16T06:27:33.024+0000
            duration: 405
            totalCpu: null
            bytesTransferred: null
            node:
              id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
              name: sdt34793
            instances:
            - startTime: 2022-08-16T06:27:32.619+0000
              endTime: 2022-08-16T06:27:33.024+0000
              duration: 405
              totalCpu: null
              bytesTransferred: null
              node:
                id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
                name: sdt34793
          executionPhase:
            startTime: 2022-08-16T06:27:33.087+0000
            endTime: 2022-08-16T06:27:33.243+0000
            duration: 156
            totalCpu: null
            node:
              id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
              name: sdt34793
            instances:
            - startTime: 2022-08-16T06:27:33.087+0000
              endTime: 2022-08-16T06:27:33.243+0000
              duration: 156
              totalCpu: null
              node:
                id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
                name: sdt34793
              type: QGC_MODE_IMPORT
          dataTransferPhase:
            startTime: 2022-08-16T06:27:33.197+0000
            endTime: 2022-08-16T06:27:33.244+0000
            duration: 47
            totalCpu: 20
            totalNodes: 1
            cpuSkew: 1
            highestCpuNode:
              id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
              name: sdt34793
            dataSkew: 1
            highestDataNode:
              id: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
              name: sdt34793
            bytesTransferred: 203
            compressedSize: 203
            decompressedSize: 280
          errors: null
          warnings: null
        bridges: []
        summaryInfo:
          managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
          indexTime: 2022-08-16T06:27:32.868+0000
          summaryDurationSecs: 0.011
          summarized: true
          complete: true
          error: null
          lastReceived:
            "5280b9b6-0096-4640-beb1-2efd2fb4b177": 2022-08-16T06:27:38.019+0000
          metricVersion: 2
      type: object
    query-details:
      example:
      - received: 2022-08-16T06:27:38.019+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
        systemId: 983b37cb-8fe6-491d-8df0-6cd180764e6e
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: META_PHASE
        mode: QGC_MODE_METADATA
        startTime: 2022-08-16T06:27:32.619+0000
        endTime: 2022-08-16T06:27:33.024+0000
        source: TARGET
        errors: null
        warnings: null
        queryText: HELP COLUMN * FROM "TESTUSER"."remote_tab";SELECT session
        sessionInfo:
          user: TESTUSER
          role: null
          hostId: null
          queryId: null
          requestId: null
          sessionId: "2688"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo: null
        controlInfo:
          requestSize: 928
          responseSize: 2740
      - received: 2022-08-16T06:27:38.019+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
        systemId: 983b37cb-8fe6-491d-8df0-6cd180764e6e
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: DATA_EXE_PHASE
        mode: QGC_MODE_IMPORT
        startTime: 2022-08-16T06:27:33.087+0000
        endTime: 2022-08-16T06:27:33.243+0000
        source: TARGET
        errors: null
        warnings: null
        queryText: "SELECT * FROM TD_SYSFNLIB.QGRemoteExport(ON(SELECT c_ID ,c_G_Array_0\
          \ ,c_G_Boolean_0 ,c_G_Date_0  FROM TESTUSER.remote_tab ) USING uuid('3823b87b-e215-4196-a8d9-f42916472446')\
          \ QGLVersionId('362c97e5-b4ad-4a7c-be9e-06399aeb058d;1e8e3d6b-1b38-473b-99c0-9b5811686220;4e9a4775-3e45-4a13-bab2-a266a17c762a;d9f942c4-9d41-4d88-bc4c-2ede1fe43e74;3d0214c3-5643-4539-ab0d-45fc9bd74933;a5ab1592-c146-4733-9f56-96cf099c7db6;a5ab1592-c146-4733-9f56-96cf099c7db6')\
          \ connectionMaxIdleTime('86400') defaultPushProfile('NONE') tlsPort('443')\
          \ replaceUnsupportedUC('false') logfilePath('/var/opt/teradata/tdqg/connector/tdqg-teradata-connector/02.19.00.00-2/logs/5001/')\
          \ connectionPoolSize('100') loaderConnectorName('libtdqgc.so') linkBufferCount('4')\
          \ connectorPath('/opt/teradata/tdqg/connector/tdqg-teradata-connector/02.19.00.00-2/lib/')\
          \ linkBufferSize('1048576') validateUnsupportedUC('false') enableAsyncAbort('false')\
          \ unsupportedDataType('Cast to Varchar') gssJar('/usr/tdbms/bin/tdgssconfig.jar')\
          \ disablePushdown('false') fabricPath('/opt/teradata/tdqg/fabric/02.19.00.00-1/driver/')\
          \ remoteConnectorName('') byteCountReportFrequency('640000') responseTimeout('86400000')\
          \ transactionMode('TERA') roleSupport('false') jdbcJar('/usr/tdbms/bin/terajdbc4.jar')\
          \ useTrusted('false') shmPath('/dev/shm/td_qg_ipc/5001/uds') connectorName('teradata')\
          \ evictPeriodMin('30') enableJdbcTLS('false') enableLogging('DEBUG') ifs('[{\"\
          t\":1,\"l\":4,\"p\":4},{\"t\":20,\"l\":60,\"p\":60},{\"t\":3,\"l\":1,\"\
          p\":1},{\"t\":13,\"l\":4,\"p\":4}]')) AS dt;SELECT session"
        sessionInfo:
          user: TESTUSER
          role: null
          hostId: null
          queryId: null
          requestId: null
          sessionId: "2688"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo: null
        controlInfo:
          requestSize: 970
          responseSize: 1568
      - received: 2022-08-16T06:27:37.036+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 740b4af8-9c9f-42be-a5d4-d68726041d14
        systemId: 140d868e-e00d-4da9-9492-95447458ab67
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: META_PHASE
        mode: QGC_MODE_METADATA
        startTime: 2022-08-16T06:27:32.402+0000
        endTime: 2022-08-16T06:27:32.816+0000
        source: INITIATOR
        errors: null
        warnings: null
        queryText: "select c_ID, c_G_Boolean_0, c_G_Date_0, c_G_Array_0 from TESTUSER.remote_tab@T2T;"
        sessionInfo:
          user: TESTUSER
          role: null
          hostId: "1"
          queryId: "307191888041164409"
          requestId: "7"
          sessionId: "2554"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo: null
        controlInfo:
          requestSize: 928
          responseSize: 2740
      - received: 2022-08-16T06:27:37.036+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 740b4af8-9c9f-42be-a5d4-d68726041d14
        systemId: 140d868e-e00d-4da9-9492-95447458ab67
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: DATA_IMPORT
        mode: null
        startTime: 2022-08-16T06:27:32.868+0000
        endTime: 2022-08-16T06:27:33.036+0000
        source: INITIATOR
        errors: null
        warnings: null
        queryText: null
        sessionInfo:
          user: null
          role: null
          hostId: "1"
          queryId: "307191888041164409"
          requestId: "7"
          sessionId: "2554"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo:
          bridgeId: null
          connector:
            bytesTransferred: 280
            rowsTransferred: 10
            blocksTransferred: 2
            continuedBlocks: 0
            bufferWaitTimeMillis: 239
            channelCount: 2
            channels:
            - name: AMP_0_DATA
              taskId: AMP_0
              startTime: 2022-08-16T06:27:32.869+0000
              endTime: 2022-08-16T06:27:33.034+0000
              bytesTransferred: 56
              rowsTransferred: 2
              blocksTransferred: 1
              continuedBlocks: 0
              bufferWaitTimeMillis: 119
            - name: AMP_1_DATA
              taskId: AMP_1
              startTime: 2022-08-16T06:27:32.868+0000
              endTime: 2022-08-16T06:27:33.035+0000
              bytesTransferred: 224
              rowsTransferred: 8
              blocksTransferred: 1
              continuedBlocks: 0
              bufferWaitTimeMillis: 120
          approximateCpu: 0
          export:
            bytesTransferred: 0
            rowsTransferred: 0
            blocksTransferred: 0
            continuedBlocks: 0
            uncompressedSize: 0
            connectionCount: 0
            connections: null
            connectionsWaiting: 0
            connectionsBlocked: 0
            buffersAvailable: 0
            slowNode: ""
            bufferConsumed: 0
          import:
            bytesTransferred: 203
            rowsTransferred: 10
            blocksTransferred: 2
            continuedBlocks: 0
            uncompressedSize: 280
            connectionCount: 1
            connections:
            - hostname: sdt34793
              nodeId: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
              connectionId: a2fae499-f0e3-44e1-9e6a-82924c50ddf3
              number: 1
              fromPool: true
              localAddress: 10.27.80.65:5001
              remoteAddress: 10.27.80.79:33062
              startTime: 2022-08-16T06:27:32.987+0000
              endTime: 2022-08-16T06:27:33.033+0000
              bytesTransferred: 203
              rowsTransferred: 10
              blocksTransferred: 2
              continuedBlocks: 0
              uncompressedSize: 280
              reconnects: 0
            connectionsWaiting: 0
            connectionsBlocked: 0
            buffersAvailable: 0
            slowNode: ""
            bufferConsumed: 0
      - received: 2022-08-16T06:27:38.019+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 362c97e5-b4ad-4a7c-be9e-06399aeb058d
        systemId: 983b37cb-8fe6-491d-8df0-6cd180764e6e
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: DATA_EXPORT
        mode: null
        startTime: 2022-08-16T06:27:33.197+0000
        endTime: 2022-08-16T06:27:33.244+0000
        source: TARGET
        errors: null
        warnings: null
        queryText: null
        sessionInfo:
          user: null
          role: null
          hostId: "1"
          queryId: "307191388101572517"
          requestId: "19"
          sessionId: "2688"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo:
          bridgeId: null
          connector:
            bytesTransferred: 280
            rowsTransferred: 10
            blocksTransferred: 2
            continuedBlocks: 0
            bufferWaitTimeMillis: 0
            channelCount: 2
            channels:
            - name: AMP_1_DATA
              taskId: AMP_1
              startTime: 2022-08-16T06:27:33.197+0000
              endTime: 2022-08-16T06:27:33.198+0000
              bytesTransferred: 56
              rowsTransferred: 2
              blocksTransferred: 1
              continuedBlocks: 0
              bufferWaitTimeMillis: 0
            - name: AMP_0_DATA
              taskId: AMP_0
              startTime: 2022-08-16T06:27:33.197+0000
              endTime: 2022-08-16T06:27:33.198+0000
              bytesTransferred: 224
              rowsTransferred: 8
              blocksTransferred: 1
              continuedBlocks: 0
              bufferWaitTimeMillis: 0
          approximateCpu: 0.020004272
          export:
            bytesTransferred: 203
            rowsTransferred: 10
            blocksTransferred: 2
            continuedBlocks: 0
            uncompressedSize: 280
            connectionCount: 1
            connections:
            - hostname: sdt34770
              nodeId: 740b4af8-9c9f-42be-a5d4-d68726041d14
              connectionId: a2fae499-f0e3-44e1-9e6a-82924c50ddf3
              number: 1
              fromPool: true
              localAddress: 10.27.80.79:33062
              remoteAddress: 10.27.80.65:5001
              startTime: 2022-08-16T06:27:33.197+0000
              endTime: 2022-08-16T06:27:33.244+0000
              bytesTransferred: 203
              rowsTransferred: 10
              blocksTransferred: 2
              continuedBlocks: 0
              uncompressedSize: 280
              reconnects: 0
            connectionsWaiting: 0
            connectionsBlocked: 0
            buffersAvailable: 0
            slowNode: ""
            bufferConsumed: 0
          import:
            bytesTransferred: 0
            rowsTransferred: 0
            blocksTransferred: 0
            continuedBlocks: 0
            uncompressedSize: 0
            connectionCount: 0
            connections: null
            connectionsWaiting: 0
            connectionsBlocked: 0
            buffersAvailable: 0
            slowNode: ""
            bufferConsumed: 0
      - received: 2022-08-16T06:27:37.036+0000
        queryId: 3823b87b-e215-4196-a8d9-f42916472446
        nodeId: 740b4af8-9c9f-42be-a5d4-d68726041d14
        systemId: 140d868e-e00d-4da9-9492-95447458ab67
        managerId: 5280b9b6-0096-4640-beb1-2efd2fb4b177
        phase: DATA_EXE_PHASE
        mode: QGC_MODE_IMPORT
        startTime: 2022-08-16T06:27:32.868+0000
        endTime: 2022-08-16T06:27:33.033+0000
        source: INITIATOR
        errors: null
        warnings: null
        queryText: null
        sessionInfo:
          user: TESTUSER
          role: null
          hostId: "1"
          queryId: "307191888041164409"
          requestId: "7"
          sessionId: "2554"
          transactionId: null
        configInfo:
          linkVersionId: 1e8e3d6b-1b38-473b-99c0-9b5811686220
          fabricVersionId: 5b0ebf98-1084-40cb-a0f8-90826a29a630
          initiatorConnectorVersionId: 4e9a4775-3e45-4a13-bab2-a266a17c762a
          targetConnectorVersionId: d9f942c4-9d41-4d88-bc4c-2ede1fe43e74
          hopConfig:
          - initiatorNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            targetNetworkVersionId: a5ab1592-c146-4733-9f56-96cf099c7db6
            commPolicyVersionId: 3d0214c3-5643-4539-ab0d-45fc9bd74933
        transferInfo: null
        controlInfo:
          requestSize: 970
          responseSize: 1568
      type: object
    software:
      example:
        qgmVersion: 02.04.00.00
        fileName: tdqg-hive-connector__linux_x8664.02.04.00.01-56.tar.gz
        connectorProperties:
        - unitsi18nKey: unitsi18nKey
          requiredForInstall: true
          connectorCheckOnly: true
          defaultValue: 10000
          installOnly: true
          subGroup: knox
          dataType: INTEGER
          appliesTo: false
          required: true
          i18nKey: port
          name: port
          overridable: true
          enumi18nKeyPrefix: enumi18nKeyPrefix
          i18nDescriptionKey: portDescription
          requiredForConnectorCheck: true
          enumValues:
          - OPTION1
          - OPTION2
          - OPTION3
          confidential: true
          group: security
          order: 1
        - unitsi18nKey: unitsi18nKey
          requiredForInstall: true
          connectorCheckOnly: true
          defaultValue: 10000
          installOnly: true
          subGroup: knox
          dataType: INTEGER
          appliesTo: false
          required: true
          i18nKey: port
          name: port
          overridable: true
          enumi18nKeyPrefix: enumi18nKeyPrefix
          i18nDescriptionKey: portDescription
          requiredForConnectorCheck: true
          enumValues:
          - OPTION1
          - OPTION2
          - OPTION3
          confidential: true
          group: security
          order: 1
        queryPointSupport: true
        loaderConnectorName: loaderConnectorName
        buildDate: 2000-01-23T04:56:07.000+00:00
        packageSize: 234301
        managerId: 0bfe8c3c-2d52-4818-872b-babafbd252cc
        type: CONNECTOR
        version: 02.04.00.01-56
        platform: noarch
        foreignServerRollbackSupport: true
        installMethod: ONE_DRIVER
        driverSupportEnabled: true
        name: tdqg-node
        driverName: java
        id: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        lastModified: 2000-01-23T04:56:07.000+00:00
        remoteConnectorName: remoteConnectorName
        remoteConnectorClassName: com.teradata.querygrid.qgc.hive.remote.HiveConnectorFactory
      properties:
        id:
          description: Id of the software
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        lastModified:
          description: The last time this object was modified
          format: date-time
          type: string
        name:
          description: The name of the software package.
          example: tdqg-node
          type: string
        fileName:
          description: The file name of the uploaded software package.
          example: tdqg-hive-connector__linux_x8664.02.04.00.01-56.tar.gz
          type: string
        type:
          description: The type of the software package
          enum:
          - NODE
          - FABRIC
          - CONNECTOR
          example: CONNECTOR
          type: string
        version:
          description: The version of the software pacakge
          example: 02.04.00.01-56
          type: string
        qgmVersion:
          description: The minimum supported version of the QGM the pacakge requires.
          example: 02.04.00.00
          type: string
        platform:
          description: The platform for the package.
          example: noarch
          type: string
        buildDate:
          description: The time the package was built.
          format: date-time
          type: string
        packageSize:
          description: The size of the package in bytes
          example: 234301
          type: number
        queryPointSupport:
          description: "Flags if a connnector supports initiating queries (true),\
            \ or just being the target of queries (false)."
          type: boolean
        driverSupportEnabled:
          description: Flags if a connector has driver support feature enabled
          example: true
          type: boolean
        foreignServerRollbackSupport:
          description: Flags if connector supports foreign server rollback.
          example: true
          type: boolean
        driverName:
          description: The name of the driver required by the connector.
          example: java
          type: string
        loaderConnectorName:
          description: The name of the connector loader
          type: string
        remoteConnectorName:
          description: The name of the remote connector.
          type: string
        remoteConnectorClassName:
          description: The class name of the remote connector
          example: com.teradata.querygrid.qgc.hive.remote.HiveConnectorFactory
          type: string
        connectorProperties:
          description: Meta data about the properties that can be supplied to a connector.
          items:
            $ref: '#/components/schemas/connector-properties'
          type: array
        managerId:
          description: The ID of the manager the software was uploaded to.
          example: 0bfe8c3c-2d52-4818-872b-babafbd252cc
          type: string
        installMethod:
          description: The type of install method the connector supports.
          enum:
          - NONE
          - ONE_DRIVER
          - ALL_DRIVERS
          example: ONE_DRIVER
          type: string
      type: object
    connector-properties:
      example:
        unitsi18nKey: unitsi18nKey
        requiredForInstall: true
        connectorCheckOnly: true
        defaultValue: 10000
        installOnly: true
        subGroup: knox
        dataType: INTEGER
        appliesTo: false
        required: true
        i18nKey: port
        name: port
        overridable: true
        enumi18nKeyPrefix: enumi18nKeyPrefix
        i18nDescriptionKey: portDescription
        requiredForConnectorCheck: true
        enumValues:
        - OPTION1
        - OPTION2
        - OPTION3
        confidential: true
        group: security
        order: 1
      properties:
        name:
          description: The name of the property
          example: port
          type: string
        i18nKey:
          description: The key to use to lookup the i18n version of the property in
            the resouce bundle.
          example: port
        i18nDescriptionKey:
          description: The key to use to lookup the i18n version of the property description
            in the resouce bundle.
          example: portDescription
        dataType:
          description: The data type of the property value
          enum:
          - STRING
          - PASSWORD
          - INTEGER
          - LONG
          - FLOAT
          - DOUBLE
          - BOOLEAN
          - ENUM
          example: INTEGER
          type: string
        required:
          description: Flags if the property value is required
          type: boolean
        requiredForConnectorCheck:
          description: Flags if the property is required for the Connector diagnostic
            check.
          type: boolean
        connectorCheckOnly:
          description: Flags if the property is only associated with a Connector diagnostic
            check
          type: boolean
        defaultValue:
          description: The default value for the property
          example: 10000
        appliesTo:
          description: "Flags if the property applies to the initiator, target, or\
            \ both"
          enum:
          - false
          - false
          - false
          example: false
          type: boolean
        enumValues:
          description: The possible values if the data type is enum
          example:
          - OPTION1
          - OPTION2
          - OPTION3
          items:
            type: string
          type: array
        enumi18nKeyPrefix:
          description: The prefix to apply to enum values when looking up i18n strings
            in resource bundle
          type: string
        unitsi18nKey:
          description: The label used to lookup the language specific units in the
            resource bundle
          type: string
        confidential:
          description: Flags if the property value should be kept confidential and
            encrypted on disk
          type: boolean
        overridable:
          description: Flags if the property has the ability to be overridden by end
            users.
          type: boolean
        requiredForInstall:
          description: Flags if the property is required for connector install
          type: boolean
        installOnly:
          description: Flags if the property is only required for Connector install
          type: boolean
        group:
          description: Indicates the group for this connector property
          example: security
          type: string
        subGroup:
          description: Indicates the sub-group for this connector property
          example: knox
          type: string
        order:
          description: Indicates display order within a group or subgroup
          example: 1
          type: integer
      type: object
    user:
      example:
        password: password
        defaultUser: false
        description: description
        username: user1
      properties:
        username:
          description: The account name.
          example: user1
          type: string
        password:
          description: The account password (not returned on get).
          type: string
        defaultUser:
          description: Flags if user is a default account.
          example: false
          type: boolean
        description:
          description: A description of the account.
          type: string
      type: object
    user-post:
      example:
        password: password
        unlockAccountRequest: false
        defaultUser: false
        description: description
        username: user1
      properties:
        username:
          description: The account name.
          example: user1
          type: string
        password:
          description: The account password (not returned on get).
          type: string
        defaultUser:
          description: Flags if user is a default account.
          example: false
          type: boolean
        description:
          description: A description of the account.
          type: string
        unlockAccountRequest:
          description: True if the request is for unlocking the account (not returned
            on get).
          example: false
          type: boolean
      type: object
    data-center:
      example:
        name: San Diego
        description: "Data center located in San Diego, CA."
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
      properties:
        id:
          description: The auto-generated ID of the data center.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time this data center was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the data center.
          example: San Diego
          type: string
        description:
          description: A description of the data center.
          example: "Data center located in San Diego, CA."
          type: string
      type: object
    post-data-center:
      properties:
        name:
          description: The name of the data center.
          example: San Diego
          type: string
        description:
          description: A description of the data center.
          example: "Data center located in San Diego, CA."
          type: string
      type: object
    not-found-config:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 404
        error:
          description: The error description
          example: Not Found
        message:
          description: The error message
          example: No <config type> with ID=f5d72daf-aa8f-486c-8058-4fc587c0b471 found.
        path:
          description: The path of the API called
          example: /api/v1/config/<type>/f5d72daf-aa8f-486c-8058-4fc587c0b471
        errorCode:
          description: The error code for localization
          example: api.error.entity.not.found
        errorParams:
          description: Parameters for localization
          example:
          - api.error.param.entity.type.<config type>
          - f5d72daf-aa8f-486c-8058-4fc587c0b471
          items:
            type: string
          type: array
      type: object
    system:
      example:
        platformType: ON_PREM
        description: Production Teradata System located in San Diego.
        enableProxy: false
        autoNodeDelete: false
        bridgeOnly: false
        proxyNetworkId: b05bcr27-4cfd-4f08-a1fa-86341f21c3ce
        tags:
          siteId: TD1000DEV01
        proxyPort: 9444
        maximumMemoryPerNode: 1073741824
        dataCenterId: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
        name: TD1
        autoNodeDeleteMinutes: 10
        systemType: TERADATA
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
        systemFlavor: emr
        region: US-WEST-2
        proxyBridgeId: c05der27-4cfd-4f08-a1fa-86341f21c7yt
        _extraInfo:
          nodesOffline: 0.8008281904610115
          lastInstallStatus: SUCCESS
          dataCenterName: DataCenter1
          lastInstallOperationId: c88dd660-575b-4ec5-857e-c2772b5a9794
          nodesOnline: 104
        softwareVersion: 02.05.00.01
        proxySupportType: LOCAL_PROXY
        enableOverridePort: false
        overridePort: 5000
      properties:
        id:
          description: The auto-generated ID of the system.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time this system was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the system.
          example: TD1
          type: string
        description:
          description: A description of the system.
          example: Production Teradata System located in San Diego.
          type: string
        dataCenterId:
          description: The ID of the data center the system is located in.
          example: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        region:
          description: Region the system is located in.
          example: US-WEST-2
          type: string
        softwareVersion:
          description: The version of the tdqg-node package that should be installed
            on all nodes of the system.
          example: 02.05.00.01
          type: string
        maximumMemoryPerNode:
          description: The maximum memory per node in bytes allowed to be used by
            QueryGrid queries.
          example: 1073741824
          type: number
        bridgeOnly:
          description: Flags if this system is a bridge only system (e.g. no local
            data source)
          example: false
          type: boolean
        proxySupportType:
          description: Flags if a proxy should be used by this system for connecting
            to QueryGrid Manager.
          enum:
          - NO_PROXY
          - LOCAL_PROXY
          - BRIDGE_PROXY
          example: LOCAL_PROXY
          type: string
        proxyPort:
          description: The port number to listen for proxying connections. Required
            with LOCAL_PROXY.
          example: 9444
          type: number
        proxyNetworkId:
          description: The UUID of a network rule to specify the network to use to
            enable proxy support. The default is to use the byn1 network interface
            automatically.
          example: b05bcr27-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        proxyBridgeId:
          description: The ID of a remote bridge system (edge nodes) to use to proxy
            connections to QueryGrid Manager. Bridge system must have proxySupport
            = LOCAL_PROXY specified.
          example: c05der27-4cfd-4f08-a1fa-86341f21c7yt
          type: string
        enableProxy:
          description: Flags if this system should be directed to run a proxy
          example: false
          type: boolean
        enableOverridePort:
          description: Flags if this system is overriding the fabric TCP server socket.
          example: false
          type: boolean
        overridePort:
          description: The port number for the tdqg-node service to bind to.
          example: 5000
          type: number
        autoNodeDelete:
          description: Flag to enable auto node delete.
          example: false
          type: boolean
        autoNodeDeleteMinutes:
          description: Number of minutes a node is offline before being auto deleted
            when autoNodeDelete is enabled.
          example: 10
          type: number
        systemType:
          description: The type of the data source to which the system nodes belong.
          enum:
          - TERADATA
          - PRESTO
          - HADOOP
          - OTHER
          example: TERADATA
          type: string
        systemFlavor:
          description: The flavor of the Hadoop system.
          enum:
          - emr
          - cdp
          - dataproc
          - hdinsight
          example: emr
          type: string
        platformType:
          description: The platform on which the system is deployed.
          enum:
          - AWS
          - AZURE
          - GC
          - PRIVATE
          - ON_PREM
          example: ON_PREM
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the system such as cloud site ID.
          example:
            siteId: TD1000DEV01
          type: object
        _extraInfo:
          $ref: '#/components/schemas/system-extra-info'
      type: object
    system-extra-info:
      example:
        nodesOffline: 0.8008281904610115
        lastInstallStatus: SUCCESS
        dataCenterName: DataCenter1
        lastInstallOperationId: c88dd660-575b-4ec5-857e-c2772b5a9794
        nodesOnline: 104
      properties:
        nodesOnline:
          description: The number of nodes online for the system
          example: 104
          type: number
        nodesOffline:
          description: The number of nodes offline for the system
          type: number
        dataCenterName:
          description: The name of the data center the system is located in.
          example: DataCenter1
          type: string
        lastInstallOperationId:
          description: The ID of the last auto-install operation performed for the
            system.
          example: c88dd660-575b-4ec5-857e-c2772b5a9794
          type: string
        lastInstallStatus:
          description: The status of the last auto-install operation performed for
            the system.
          example: SUCCESS
          type: string
      type: object
    post-system:
      properties:
        name:
          description: The name of the system.
          example: TD1
          type: string
        description:
          description: A description of the system.
          example: Production Teradata System located in San Diego.
          type: string
        dataCenterId:
          description: The ID of the data center the system is located in.
          example: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        region:
          description: Region the system is located in.
          example: US-WEST-2
          type: string
        softwareVersion:
          description: The version of the tdqg-node package that should be installed
            on all nodes of the system.
          example: 02.05.00.01
          type: string
        maximumMemoryPerNode:
          description: The maximum memory per node in bytes allowed to be used by
            QueryGrid queries.
          example: 1073741824
          type: number
        bridgeOnly:
          description: Flags if this system is a bridge only system (e.g. no local
            data source)
          example: false
          type: boolean
        proxySupportType:
          description: Flags if a proxy should be used by this system for connecting
            to QueryGrid Manager.
          enum:
          - NO_PROXY
          - LOCAL_PROXY
          - BRIDGE_PROXY
          example: LOCAL_PROXY
          type: string
        proxyPort:
          description: The port number to listen for proxying connections. Required
            with LOCAL_PROXY.
          example: 9444
          type: number
        proxyNetworkId:
          description: The UUID of a network rule to specify the network to use to
            enable proxy support. The default is to use the byn1 network interface
            automatically.
          example: b05bcr27-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        proxyBridgeId:
          description: The ID of a remote bridge system (edge nodes) to use to proxy
            connections to QueryGrid Manager. Bridge system must have proxySupport
            = LOCAL_PROXY specified.
          example: c05der27-4cfd-4f08-a1fa-86341f21c7yt
          type: string
        enableProxy:
          description: Flags if this system should be directed to run a proxy
          example: false
          type: boolean
        enableOverridePort:
          description: Flags if this system is overriding the fabric TCP server socket.
          example: false
          type: boolean
        overridePort:
          description: The port number for the tdqg-node service to bind to.
          example: 5000
          type: number
        autoNodeDelete:
          description: Flag to enable auto node delete.
          example: false
          type: boolean
        autoNodeDeleteMinutes:
          description: Number of minutes a node is offline before being auto deleted
            when autoNodeDelete is enabled.
          example: 10
          type: number
        systemType:
          description: The type of the data source to which the system nodes belong.
          enum:
          - TERADATA
          - PRESTO
          - HADOOP
          - OTHER
          example: TERADATA
          type: string
        systemFlavor:
          description: "The flavor of the Hadoop system [optional field]."
          enum:
          - emr
          - cdp
          - dataproc
          - hdinsight
          example: emr
          type: string
        platformType:
          description: The platform on which the system is deployed.
          enum:
          - AWS
          - AZURE
          - GC
          - PRIVATE
          - ON_PREM
          example: ON_PREM
          type: string
        tags:
          description: "Optional string key/value pairs for associating some context\
            \ with the system. Existing tag will be updated if the tag key exists,\
            \ otherwise new tag will be added. To remove a tag, set the tag value\
            \ to an empty string."
          example: {}
          type: object
      type: object
    bridge:
      example:
        nodeIds:
        - 3606af65-29f7-4d36-84f5-3a97e5822be1
        - 997b6864-99a0-4084-b984-b739825b098a
        systemId: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
        name: Bridge1
        description: Bridge nodes located in San Diego.
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
      properties:
        id:
          description: The auto-generated ID of the bridge.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time this bridge was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the bridge.
          example: Bridge1
          type: string
        description:
          description: A description of the bridge.
          example: Bridge nodes located in San Diego.
          type: string
        systemId:
          description: The ID of the system the bridge is associated with.
          example: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        nodeIds:
          description: The subset of the system's nodes to use for bridge.  Null indicates
            all nodes.
          example:
          - 3606af65-29f7-4d36-84f5-3a97e5822be1
          - 997b6864-99a0-4084-b984-b739825b098a
          items:
            type: string
          type: array
      type: object
    post-bridge:
      properties:
        name:
          description: The name of the bridge.
          example: Bridge1
          type: string
        description:
          description: A description of the bridge.
          example: Bridge nodes located in San Diego.
          type: string
        systemId:
          description: The ID of the system the bridge is associated with.
          example: a05acd24-4cfd-4f08-a1fa-86341f21c3ce
          type: string
        nodeIds:
          description: The subset of the system's nodes to use for bridge.  Null indicates
            all nodes.
          example:
          - 3606af65-29f7-4d36-84f5-3a97e5822be1
          - 997b6864-99a0-4084-b984-b739825b098a
          items:
            type: string
          type: array
      type: object
    comm-policy:
      allOf:
      - $ref: '#/components/schemas/comm-policy-metadata'
      - $ref: '#/components/schemas/comm_policy_allOf'
    comm-policy-metadata:
      properties:
        id:
          description: The auto-generated ID of the communication policy.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the communication policy was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the communication policy.
          example: WAN Policy
          type: string
        description:
          description: A description of the communication policy.
          example: Production communication policy used by production workloads.
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the communication policy.
          example:
            destinationSystem: vantage
          type: object
      type: object
    comm-policy-version:
      example:
        transferConcurrency: 1
        policyVersion: 2
        versionId: 22995fad-13e8-42fd-82c6-31f2390fb440
        integrityHeadersOnly: false
        compressionAlgorithm: NONE
        authenticationKeySize: 2048
        lastModified: 2017-12-11T17:52:01.088+0000
        encryptionKeySize: 128
        securityAlgorithm: AES_GCM
        securityOption: INTEGRITY_SECURE_ENCRYPTION_ALL
      properties:
        versionId:
          description: The ID associated with the active communication policy version.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
        lastModified:
          description: The last time this version was modified.
          example: 2017-12-11T17:52:01.088+0000
        transferConcurrency:
          description: |
            The number of streams to use for communication between node pairs for transferring data.
          example: 1
          type: number
        securityOption:
          description: |
            The type of security mechansims to enable for communication <br>  * IP-based Authentication, no integrity check, no encryption (INTEGRITY_NONE_ENCRYPTION_NONE) <br> * IP-based authentication, checksum integrity check, no encryption (INTEGRITY_CHECKSUM_ENCRYPTION_NONE) <br> * Key-based authentication, secure Integrity checks, encrypt credentials (INTEGRITY_SECURE_ENCRYPTION_CREDENTIALS_ONLY) <br> * Key-based authentication, secure Integrity checks, encrypt all data (INTEGRITY_SECURE_ENCRYPTION_ALL) <br>
          enum:
          - INTEGRITY_NONE_ENCRYPTION_NONE
          - INTEGRITY_CHECKSUM_ENCRYPTION_NONE
          - INTEGRITY_SECURE_ENCRYPTION_CREDENTIALS_ONLY
          - INTEGRITY_SECURE_ENCRYPTION_ALL
          example: INTEGRITY_SECURE_ENCRYPTION_ALL
          type: string
        integrityHeadersOnly:
          default: false
          description: Only perform integrity checks on message headers.
          type: boolean
        authenticationKeySize:
          description: The size of the authentication key.
          example: 2048
          type: number
        encryptionKeySize:
          description: The size of the encryption key.
          example: 128
          type: number
        compressionAlgorithm:
          description: The compression algorithm to use
          enum:
          - NONE
          - ZSTD
          example: NONE
          type: string
        securityAlgorithm:
          description: The security algorithm to use
          enum:
          - AES_CRC32C
          - AES_GCM
          - AES_SHA256
          - AES_SHA512
          example: AES_GCM
          type: string
        policyVersion:
          description: The version of comm-policy.
          enum:
          - 1
          - 2
          example: 2
          type: number
      type: object
    post-comm-policy:
      example:
        transferConcurrency: 1
        policyVersion: 2
        integrityHeadersOnly: false
        compressionAlgorithm: NONE
        name: WAN Policy
        authenticationKeySize: 2048
        description: Production communication policy used by production workloads.
        encryptionKeySize: 128
        securityAlgorithm: AES_CRC32C
        securityOption: INTEGRITY_SECURE_ENCRYPTION_ALL
        tags:
          destinationSystem: vantage
      properties:
        name:
          description: The name of the communication policy.
          example: WAN Policy
          type: string
        description:
          description: A description of the communication policy.
          example: Production communication policy used by production workloads.
          type: string
        transferConcurrency:
          description: |
            The number of streams to use for communication between node pairs for transferring data.
          example: 1
          type: number
        securityOption:
          description: |
            The type of security mechansims to enable for communication <br>  * IP-based Authentication, no integrity check, no encryption (INTEGRITY_NONE_ENCRYPTION_NONE) <br> * IP-based authentication, checksum integrity check, no encryption (INTEGRITY_CHECKSUM_ENCRYPTION_NONE) <br> * Key-based authentication, secure Integrity checks, encrypt credentials (INTEGRITY_SECURE_ENCRYPTION_CREDENTIALS_ONLY) <br> * Key-based authentication, secure Integrity checks, encrypt all data (INTEGRITY_SECURE_ENCRYPTION_ALL) <br>
          enum:
          - INTEGRITY_NONE_ENCRYPTION_NONE
          - INTEGRITY_CHECKSUM_ENCRYPTION_NONE
          - INTEGRITY_SECURE_ENCRYPTION_CREDENTIALS_ONLY
          - INTEGRITY_SECURE_ENCRYPTION_ALL
          example: INTEGRITY_SECURE_ENCRYPTION_ALL
          type: string
        securityAlgorithm:
          description: The algorithm to use for integrity checks and encryption.
          enum:
          - AES_CRC32C
          - AES_GCM
          - AES_SHA256
          - AES_SHA512
          type: string
        integrityHeadersOnly:
          default: false
          description: Only perform integrity checks on message headers.
          type: boolean
        authenticationKeySize:
          description: The size of the authentication key.
          example: 2048
          type: number
        encryptionKeySize:
          description: The size of the encryption key.
          example: 128
          type: number
        compressionAlgorithm:
          description: The compression algorithm to use
          enum:
          - NONE
          - ZSTD
          example: NONE
          type: string
        policyVersion:
          description: The version of comm-policy.
          enum:
          - 1
          - 2
          example: 2
          type: number
        tags:
          description: Optional string key/value pairs for associating some context
            with the communication policy.
          example:
            destinationSystem: vantage
          type: object
      type: object
    active-comm-policy:
      allOf:
      - $ref: '#/components/schemas/comm-policy-metadata'
      - $ref: '#/components/schemas/comm-policy-version'
      - $ref: '#/components/schemas/active_comm_policy_allOf'
    not-found-config-version:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 404
        error:
          description: The error description
          example: Not Found
        message:
          description: The error message
          example: No <config type> with ID=f5d72daf-aa8f-486c-8058-4fc587c0b471 found.
        path:
          description: The path of the API called
          example: /api/v1/config/<type>/f5d72daf-aa8f-486c-8058-4fc587c0b471/<version>
        errorCode:
          description: The error code for localization
          example: api.error.entity.not.found
        errorParams:
          description: Parameters for localization
          example:
          - api.error.param.entity.type.<config type>
          - f5d72daf-aa8f-486c-8058-4fc587c0b471
          items:
            type: string
          type: array
      type: object
    pending-comm-policy:
      allOf:
      - $ref: '#/components/schemas/comm-policy-metadata'
      - $ref: '#/components/schemas/comm-policy-version'
      - $ref: '#/components/schemas/pending_comm_policy_allOf'
    previous-comm-policy:
      allOf:
      - $ref: '#/components/schemas/comm-policy-metadata'
      - $ref: '#/components/schemas/comm-policy-version'
      - $ref: '#/components/schemas/previous_comm_policy_allOf'
    network:
      allOf:
      - $ref: '#/components/schemas/network-metadata'
      - $ref: '#/components/schemas/network_allOf'
    network-metadata:
      properties:
        id:
          description: The auto-generated ID of the network.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the network was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the network.
          example: Bynet
          type: string
        description:
          description: A description of the network.
          example: High throughput infiniband network
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the network.
          example:
            destinationSystem: vantage
          type: object
      type: object
    network-version:
      properties:
        versionId:
          description: The ID associated with the active network version.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
        lastModified:
          description: The last time this version was modified.
          example: 2017-12-11T17:52:01.088+0000
        matchingRules:
          description: The rules that define how to identity network interfaces associated
            with the network.
          items:
            $ref: '#/components/schemas/matching-rule'
          type: array
        loadBalancerAddress:
          description: The load balancer address
          example: abc.com
        connectionType:
          description: The type of connection (e.g. STANDARD or LOAD_BALANCER).
          example: STANDARD
      type: object
    matching-rule:
      example:
        type: INTERFACE_NAME
        value: eth0
      properties:
        type:
          description: The type of rule (e.g. INTERFACE_NAME or CIDR_NOTATION).
          enum:
          - INTERFACE_NAME
          - CIDR_NOTATION
          example: INTERFACE_NAME
          type: string
        value:
          description: The value used to perform the match  (e.g. eth0 or 169.154.0.0/16)
          example: eth0
          type: string
      type: object
    post-network:
      example:
        loadBalancerAddress: abc.com
        name: Bynet
        description: High throughput infiniband network
        connectionType: STANDARD
        matchingRules:
        - type: INTERFACE_NAME
          value: eth0
        - type: INTERFACE_NAME
          value: eth0
        tags:
          destinationSystem: vantage
      properties:
        name:
          description: The name of the network.
          example: Bynet
          type: string
        description:
          description: A description of the network.
          example: High throughput infiniband network
          type: string
        connectionType:
          description: The type of connection (e.g. STANDARD or LOAD_BALANCER).
          enum:
          - STANDARD
          - LOAD_BALANCER
          - NO_INGRESS
          example: STANDARD
          type: string
        matchingRules:
          description: The rules that define how to identity network interfaces associated
            with the network. Required only if connection type is STANDARD.
          items:
            $ref: '#/components/schemas/matching-rule'
          type: array
        loadBalancerAddress:
          description: The load balancer address that's required only if connection
            type is LOAD_BALANCER.
          example: abc.com
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the network.
          example:
            destinationSystem: vantage
          type: object
      type: object
    active-network:
      allOf:
      - $ref: '#/components/schemas/network-metadata'
      - $ref: '#/components/schemas/network-version'
      - $ref: '#/components/schemas/active_network_allOf'
    pending-network:
      allOf:
      - $ref: '#/components/schemas/network-metadata'
      - $ref: '#/components/schemas/network-version'
      - $ref: '#/components/schemas/pending_network_allOf'
    previous-network:
      allOf:
      - $ref: '#/components/schemas/network-metadata'
      - $ref: '#/components/schemas/network-version'
      - $ref: '#/components/schemas/previous_network_allOf'
    user-mapping:
      example:
        roleMapping:
          localRole1: remoteRole1
          localRole2: remoteRole2
        name: San Diego
        description: "Data center located in San Diego, CA."
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
        userMapping:
          localUser1: remoteUser1
          localUser2: remoteUser2
      properties:
        id:
          description: The auto-generated ID of the user mapping.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time this user mapping was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the user mapping.
          example: San Diego
          type: string
        description:
          description: A description of the user mapping.
          example: "Data center located in San Diego, CA."
          type: string
        userMapping:
          description: A map of local users to remote users.
          example:
            localUser1: remoteUser1
            localUser2: remoteUser2
          type: object
        roleMapping:
          description: A map of local roles to remote roles.
          example:
            localRole1: remoteRole1
            localRole2: remoteRole2
          type: object
      type: object
    post-user-mapping:
      properties:
        name:
          description: The name of the user mapping.
          example: San Diego
          type: string
        description:
          description: A description of the user mapping.
          example: "Data center located in San Diego, CA."
          type: string
        userMapping:
          description: A map of local users to remote users.
          example:
            localUser1: remoteUser1
            localUser2: remoteUser2
          type: object
        roleMapping:
          description: A map of local roles to remote roles.
          example:
            localRole1: remoteRole1
            localRole2: remoteRole2
          type: object
      type: object
    fabric:
      allOf:
      - $ref: '#/components/schemas/fabric-metadata'
      - $ref: '#/components/schemas/fabric_allOf'
    fabric-metadata:
      properties:
        id:
          description: The auto-generated ID of the fabric.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the fabric was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the fabric.
          example: Fabric1
          type: string
        description:
          description: A description of the fabric.
          example: Production fabric used by production workloads.
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the fabric.
          example:
            destinationSystem: vantage
          type: object
      type: object
    fabric-version:
      properties:
        versionId:
          description: The ID associated with the active fabric version.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
        lastModified:
          description: The last time this version was modified.
          example: 2017-12-11T17:52:01.088+0000
        port:
          description: The port to use for communication between systems
          example: 5000
          type: number
        softwareVersion:
          description: The version of the fabric software to deploy.
          example: 02.04.00.01-24
          type: string
        authKeySize:
          description: The authentication key size to secure fabric communications.
          enum:
          - 1536
          - 2048
          - 3072
          - 4096
          example: 1536
          type: number
        _extraInfo:
          $ref: '#/components/schemas/fabric-extra-info'
      type: object
    fabric-extra-info:
      properties:
        nodesOnline:
          description: The number of nodes online for the fabric
          example: 104
          type: number
        nodesOffline:
          description: The number of nodes offline for the fabric
          type: number
      type: object
    post-fabric:
      example:
        port: 5000
        name: Fabric1
        description: Production fabric used by production workloads.
        authKeySize: 1536
        softwareVersion: 02.04.00.01-24
        tags:
          destinationSystem: vantage
      properties:
        name:
          description: The name of the fabric.
          example: Fabric1
          type: string
        description:
          description: A description of the fabric.
          example: Production fabric used by production workloads.
          type: string
        port:
          description: The port to use for communication between systems
          example: 5000
          type: number
        softwareVersion:
          description: The version of the fabric software to deploy.
          example: 02.04.00.01-24
          type: string
        authKeySize:
          description: The authentication key size to secure fabric communications.
          enum:
          - 1536
          - 2048
          - 3072
          - 4096
          example: 1536
          type: number
        tags:
          description: Optional string key/value pairs for associating some context
            with the fabric.
          example:
            destinationSystem: vantage
          type: object
      type: object
    active-fabric:
      allOf:
      - $ref: '#/components/schemas/fabric-metadata'
      - $ref: '#/components/schemas/fabric-version'
      - $ref: '#/components/schemas/active_fabric_allOf'
    pending-fabric:
      allOf:
      - $ref: '#/components/schemas/fabric-metadata'
      - $ref: '#/components/schemas/fabric-version'
      - $ref: '#/components/schemas/pending_fabric_allOf'
    previous-fabric:
      allOf:
      - $ref: '#/components/schemas/fabric-metadata'
      - $ref: '#/components/schemas/fabric-version'
      - $ref: '#/components/schemas/previous_fabric_allOf'
    connector:
      allOf:
      - $ref: '#/components/schemas/connector-metadata'
      - $ref: '#/components/schemas/connector_allOf'
    connector-metadata:
      properties:
        id:
          description: The auto-generated ID of the connector.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the connector was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the connector.
          example: Connector1
          type: string
        disabled:
          description: Is the connector disabled.
          example: true
          type: boolean
        tags:
          description: Optional string key/value pairs for associating some context
            with the connector.
          example:
            destinationSystem: vantage
          type: object
      type: object
    connector-version:
      properties:
        versionId:
          description: The ID associated with the active connector version.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: string
        lastModified:
          description: The last time the connector was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        softwareName:
          description: The name of the connector software
          example: tdqg-teradata-connector
          type: string
        softwareVersion:
          description: The version of the connector software to deploy.
          example: 02.04.00.01-24
          type: string
        fabricId:
          description: The ID of fabric to connect to
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: string
        systemId:
          description: The ID of the system to connect to.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        driverName:
          description: Name of the connector driver.
          example: TDdriver
          type: string
        loaderConnectorName:
          description: "The connector that is dynamically loaded by the data source,\
            \ relative to the directory where the connector is installed."
          example: libtdqgc.so
          type: string
        remoteConnectorClassName:
          description: The name of the class that is loaded by the driver.
          example: com.teradata.querygrid.qgc.td.TeradataConnectorFactory
          type: string
        queryPointSupport:
          description: Flags if connector is capable of initiating queries.
          example: true
          type: boolean
        driverSupportEnabled:
          description: Flags if connector has driver support feature enabled.
          example: true
          type: boolean
        foreignServerRollbackSupport:
          description: Flags if connector supports foreign server rollback.
          example: true
          type: boolean
        envNameValuePairs:
          description: The environment variables that need to be set in driver process
          example: env1=value1;env2=value2
          type: string
        driverNodes:
          description: An array of node IDs on which to run the connector driver.
          example:
          - 75588f31-b5d0-45a5-8843-481150f0e4f8
          - b2edba06-119e-4200-a482-8d7cf5392663
          - e5fd8358-db3c-425f-80df-d24c41a03a3c
          items:
            type: string
          type: array
        properties:
          description: "The connector properties to set. Untar the connector package\
            \ and open the \\<version\\>/.pkgmeta/pkginfo.yaml file to look at the\
            \ supported connector properties. All properties for the connector are\
            \ listed in that file under “connectorProperties”. The mapping of the\
            \ properties with the names used in the UI and the user guide, along with\
            \ descriptions, can be found in the \\<version\\>/.pkgmeta/messages.properties\
            \ file."
          example:
            server: TD1.teradata.com
            port: 5000
          type: object
        overrideableProperties:
          description: The connector properties which can be overridden by the user.
            Untar the connector package and open the \<version\>/.pkgmeta/pkginfo.yaml
            file to look at the supported connector properties. All overridable properties
            for the connector are listed in that file under “connectorProperties”
            with 'overridable' attribute set as 'True'.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        confidentialPropertyNames:
          description: The connector properties which are confidential. Untar the
            connector package and open the \<version\>/.pkgmeta/pkginfo.yaml file
            to look at the supported connector properties. All confidential properties
            for the connector are listed in that file under “connectorProperties”
            with 'dataType' attribute set as 'PASSWORD'.
          example:
          - authPassword
          items:
            type: string
          type: array
        allowedOSUsers:
          description: The list of OS users that are allowed to access shared memory
            interfaces of the Fabric
          example:
          - teradata
          - hive
          - presto
          items:
            type: string
          type: array
        installMethod:
          description: The type of install method used to install the connector.
          enum:
          - NONE
          - ONE_DRIVER
          - ALL_NODES
          example: ONE_DRIVER
          type: string
        _extraInfo:
          $ref: '#/components/schemas/connector-extra-info'
      type: object
    connector-extra-info:
      properties:
        nodesOnline:
          description: The number of nodes online for the connector
          example: 104
          type: number
        nodesOffline:
          description: The number of nodes offline for the connector
          type: number
        driversOnline:
          description: The number of driver nodes online for the connector
          example: 2
          type: number
        driversOffline:
          description: The number of driver nodes offline for the connector
          type: number
        systemName:
          description: The name of the system the connector is associated with
          type: string
        fabricName:
          description: The name of the fabric the connector is associated with
          type: string
      type: object
    post-connector:
      example:
        systemId: 33946bcd-355b-2ac3-2bde-91f2390fb412
        softwareName: tdqg-teradata-connector
        fabricId: 22995fad-13e8-42fd-82c6-31f2390fb440
        name: TD1
        description: Production connector for TD1.
        driverNodes:
        - 75588f31-b5d0-45a5-8843-481150f0e4f8
        - b2edba06-119e-4200-a482-8d7cf5392663
        - e5fd8358-db3c-425f-80df-d24c41a03a3c
        allowedOSUsers:
        - teradata
        - hive
        - presto
        overrideableProperties:
        - overridableProperty1
        - overridableProperty2
        softwareVersion: 02.04.00.01-24
        properties:
          server: TD1.teradata.com
          port: 5000
        tags:
          destinationSystem: vantage
      properties:
        name:
          description: The name of the connector.
          example: TD1
          type: string
        description:
          description: A description of the connector.
          example: Production connector for TD1.
          type: string
        softwareName:
          description: The name of the connector software
          example: tdqg-teradata-connector
          type: string
        softwareVersion:
          description: The version of the connector software to deploy.
          example: 02.04.00.01-24
          type: string
        fabricId:
          description: The ID of fabric to connect to
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: string
        systemId:
          description: The ID of the system to connect to.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        driverNodes:
          description: An array of node IDs on which to run the connector driver.
          example:
          - 75588f31-b5d0-45a5-8843-481150f0e4f8
          - b2edba06-119e-4200-a482-8d7cf5392663
          - e5fd8358-db3c-425f-80df-d24c41a03a3c
          items:
            type: string
          type: array
        properties:
          description: "The connector properties to set. Untar the connector package\
            \ and open the \\<version\\>/.pkgmeta/pkginfo.yaml file to look at the\
            \ supported connector properties. All properties for the connector are\
            \ listed in that file under “connectorProperties”. The mapping of the\
            \ properties with the names used in the UI and the user guide, along with\
            \ descriptions, can be found in the \\<version\\>/.pkgmeta/messages.properties\
            \ file."
          example:
            server: TD1.teradata.com
            port: 5000
          type: object
        overrideableProperties:
          description: The connector properties which can be overridden by the user.
            Untar the connector package and open the \<version\>/.pkgmeta/pkginfo.yaml
            file to look at the supported connector properties. All overridable properties
            for the connector are listed in that file under “connectorProperties”
            with 'overridable' attribute set as 'True'.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        allowedOSUsers:
          description: The list of OS users that are allowed to access shared memory
            interfaces of the Fabric
          example:
          - teradata
          - hive
          - presto
          items:
            type: string
          type: array
        tags:
          description: Optional string key/value pairs for associating some context
            with the connector.
          example:
            destinationSystem: vantage
          type: object
      type: object
    active-connector:
      allOf:
      - $ref: '#/components/schemas/connector-metadata'
      - $ref: '#/components/schemas/connector-version'
      - $ref: '#/components/schemas/active_connector_allOf'
    pending-connector:
      allOf:
      - $ref: '#/components/schemas/connector-metadata'
      - $ref: '#/components/schemas/connector-version'
      - $ref: '#/components/schemas/pending_connector_allOf'
    previous-connector:
      allOf:
      - $ref: '#/components/schemas/connector-metadata'
      - $ref: '#/components/schemas/connector-version'
      - $ref: '#/components/schemas/previous_connector_allOf'
    link:
      allOf:
      - $ref: '#/components/schemas/link-metadata'
      - $ref: '#/components/schemas/link_allOf'
    link-metadata:
      properties:
        id:
          description: The auto-generated ID of the link.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the link was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        name:
          description: The name of the link.
          example: Link1
          type: string
        description:
          description: A description of the link.
          example: Production link used by production workloads.
          type: string
        tags:
          description: Optional string key/value pairs for associating some context
            with the link.
          example:
            destinationSystem: vantage
          type: object
      type: object
    link-version:
      properties:
        versionId:
          description: The ID associated with the active link version.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
        lastModified:
          description: The last time this version was modified.
          example: 2017-12-11T17:52:01.088+0000
        fabricId:
          description: The ID of the fabric the link belongs to.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: string
        initiatorConnectorId:
          description: The ID of the initiating connector.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        initiatorProperties:
          description: The initiating connector properties to set or override.
          example:
            property1: value1
            property2: value2
          type: object
        overridableInitiatorPropertyNames:
          description: The initiator connector properties which can be overridden
            by the user.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        initiatorNetworkId:
          description: The network to use on the initiating system. null value implies
            use any available route.
          example: 23b9f4a9-223d-424d-a78b-ce378be62e24
          type: string
        initiatorThreadsPerQuery:
          description: The number of threads to use per query by the initiator
          example: 1
          type: number
        targetConnectorId:
          description: The ID of the initiating connector.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        targetProperties:
          description: The target connector properties to set or override.
          example:
            property1: value1
            property2: value2
          type: object
        overridableTargetPropertyNames:
          description: The target connector properties which can be overridden by
            the user.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        targetNetworkId:
          description: The network to use on the target system. null value implies
            use any available route.
          example: 23b9f4a9-223d-424d-a78b-ce378be62e24
          type: string
        targetThreadsPerQuery:
          description: The number of threads to use per query by the initiator
          example: 1
          type: number
        commPolicyId:
          description: The ID of the communication policy to use for communication
            with first bridge or target.
          example: 707f34d6-08b7-4030-962e-94e3fa98a6c2
          type: string
        userMappingId:
          description: The user mapping to apply. null value implies no user mapping.
          example: 94ce9883-4910-4914-97cb-931439309958
          type: string
        usersToTroubleshoot:
          description: The database users to set specific log levels on.
          example:
            user1: INFO
            user2: DEBUG
            user3: VERBOSE
          type: object
        enableAcks:
          description: Enable sending acknowledgments for data blocks to enable ability
            to recover from transient network failures.
          example: true
          nullable: true
          type: boolean
        bridges:
          items:
            $ref: '#/components/schemas/link-bridge'
          type: array
        _extraInfo:
          $ref: '#/components/schemas/link-extra-info'
      type: object
    link-bridge:
      example:
        commPolicyId: 707f34d6-08b7-4030-962e-94e3fa98a6c2
        bridgeId: 070658e5-a8f6-496c-870c-84e55c04880f
        targetNetworkId: e68b5277-d385-4763-bcf5-e68a96aa57ef
        threadsPerQuery: 1
        initiatorNetworkId: a8f8b09a-512c-4bf3-8a90-26a4c46c65da
      properties:
        bridgeId:
          description: The ID of the bridge.
          example: 070658e5-a8f6-496c-870c-84e55c04880f
          type: string
        initiatorNetworkId:
          description: "The ID of the network for the initiating side of bridge, else\
            \ NULL for Any."
          example: a8f8b09a-512c-4bf3-8a90-26a4c46c65da
          type: string
        targetNetworkId:
          description: "The ID of the network for the target side of bridge 1, else\
            \ NULL for Any."
          example: e68b5277-d385-4763-bcf5-e68a96aa57ef
          type: string
        commPolicyId:
          description: The ID of the communication policy to use between the next
            bridge or target.
          example: 707f34d6-08b7-4030-962e-94e3fa98a6c2
          type: string
        threadsPerQuery:
          description: The number of threads to use per query by the bridge
          example: 1
          type: number
      type: object
    link-extra-info:
      properties:
        initiatingConnectorName:
          description: The name of the initiating connector
          type: string
        initiatingSystemName:
          description: The name of the initiating system
          type: string
        targetConnectorName:
          description: The name of the target connector
          type: string
        targetSystemName:
          description: The name of the target system
          type: string
        commPolicyName:
          description: The name of the comm policy
          type: string
        fabricName:
          description: The name of the fabric.
          type: string
      type: object
    post-link:
      example:
        targetConnectorId: 33946bcd-355b-2ac3-2bde-91f2390fb412
        commPolicyId: 707f34d6-08b7-4030-962e-94e3fa98a6c2
        overridableInitiatorPropertyNames:
        - overridableProperty1
        - overridableProperty2
        enableAcks: true
        overridableTargetPropertyNames:
        - overridableProperty1
        - overridableProperty2
        fabricId: 22995fad-13e8-42fd-82c6-31f2390fb440
        initiatorConnectorId: 33946bcd-355b-2ac3-2bde-91f2390fb412
        userMappingId: 94ce9883-4910-4914-97cb-931439309958
        initiatorNetworkId: 23b9f4a9-223d-424d-a78b-ce378be62e24
        description: Production link used by production workloads.
        targetProperties:
          property1: value1
          property2: value2
        bridges:
        - commPolicyId: 707f34d6-08b7-4030-962e-94e3fa98a6c2
          bridgeId: 070658e5-a8f6-496c-870c-84e55c04880f
          targetNetworkId: e68b5277-d385-4763-bcf5-e68a96aa57ef
          threadsPerQuery: 1
          initiatorNetworkId: a8f8b09a-512c-4bf3-8a90-26a4c46c65da
        - commPolicyId: 707f34d6-08b7-4030-962e-94e3fa98a6c2
          bridgeId: 070658e5-a8f6-496c-870c-84e55c04880f
          targetNetworkId: e68b5277-d385-4763-bcf5-e68a96aa57ef
          threadsPerQuery: 1
          initiatorNetworkId: a8f8b09a-512c-4bf3-8a90-26a4c46c65da
        initiatorThreadsPerQuery: 1
        tags:
          destinationSystem: vantage
        usersToTroubleshoot:
          user1: INFO
          user2: DEBUG
          user3: VERBOSE
        targetThreadsPerQuery: 1
        targetNetworkId: 23b9f4a9-223d-424d-a78b-ce378be62e24
        name: Link1
        initiatorProperties:
          property1: value1
          property2: value2
      properties:
        name:
          description: The name of the link.
          example: Link1
          type: string
        description:
          description: A description of the link.
          example: Production link used by production workloads.
          type: string
        fabricId:
          description: The ID of the fabric the link belongs to.
          example: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: string
        initiatorConnectorId:
          description: The ID of the initiating connector.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        initiatorProperties:
          description: The initiating connector properties to set or override.
          example:
            property1: value1
            property2: value2
          type: object
        overridableInitiatorPropertyNames:
          description: The initiator connector properties which can be overridden
            by the user.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        initiatorNetworkId:
          description: The network to use on the initiating system. null value implies
            use any available route.
          example: 23b9f4a9-223d-424d-a78b-ce378be62e24
          type: string
        initiatorThreadsPerQuery:
          description: The number of threads to use per query by the initiator
          example: 1
          type: number
        targetConnectorId:
          description: The ID of the initiating connector.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        targetProperties:
          description: The target connector properties to set or override.
          example:
            property1: value1
            property2: value2
          type: object
        overridableTargetPropertyNames:
          description: The target connector properties which can be overridden by
            the user.
          example:
          - overridableProperty1
          - overridableProperty2
          items:
            type: string
          type: array
        targetNetworkId:
          description: The network to use on the target system. null value implies
            use any available route.
          example: 23b9f4a9-223d-424d-a78b-ce378be62e24
          type: string
        targetThreadsPerQuery:
          description: The number of threads to use per query by the initiator
          example: 1
          type: number
        commPolicyId:
          description: The ID of the communication policy to use for communication
            with first bridge or target.
          example: 707f34d6-08b7-4030-962e-94e3fa98a6c2
          type: string
        userMappingId:
          description: The user mapping to apply. null value implies no user mapping.
          example: 94ce9883-4910-4914-97cb-931439309958
          type: string
        usersToTroubleshoot:
          description: The database users to set specific log levels on.
          example:
            user1: INFO
            user2: DEBUG
            user3: VERBOSE
          type: object
        enableAcks:
          description: Enable sending acknowledgments for data blocks to enable ability
            to recover from transient network failures.
          example: true
          nullable: true
          type: boolean
        bridges:
          items:
            $ref: '#/components/schemas/link-bridge'
          type: array
        tags:
          description: Optional string key/value pairs for associating some context
            with the link.
          example:
            destinationSystem: vantage
          type: object
      type: object
    active-link:
      allOf:
      - $ref: '#/components/schemas/link-metadata'
      - $ref: '#/components/schemas/link-version'
      - $ref: '#/components/schemas/active_link_allOf'
    pending-link:
      allOf:
      - $ref: '#/components/schemas/link-metadata'
      - $ref: '#/components/schemas/link-version'
      - $ref: '#/components/schemas/pending_link_allOf'
    previous-link:
      allOf:
      - $ref: '#/components/schemas/link-metadata'
      - $ref: '#/components/schemas/link-version'
      - $ref: '#/components/schemas/previous_link_allOf'
    node-virtual-ips-response:
      example:
        networkInterfaces:
        - address: 169.254.169.254
          name: eth0
        - address: 169.254.169.254
          name: eth0
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
      properties:
        id:
          description: The ID of the Node Virtual IPs object. It should match an existing
            QgNode object. It is not required when issuing a PUT request.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time this data center was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        networkInterfaces:
          description: The virtual IPs associated with the node
          items:
            $ref: '#/components/schemas/node_virtual_ips_response_networkInterfaces_inner'
          type: array
      type: object
    node-virtual-ips-request:
      properties:
        networkInterfaces:
          description: The virtual IPs associated with the node
          items:
            $ref: '#/components/schemas/node_virtual_ips_response_networkInterfaces_inner'
          type: array
      type: object
    shared-memory-estimator-inputs:
      properties:
        queryConcurrency:
          description: |
            Expected maximum number of QueryGrid queries the user expects to run at the same time for all connectors on that system
          type: number
        linkBufferSize:
          description: |
            The maximum buffer size that any link or connector will be configured to use involving this system. Size in bytes.
          type: number
        linkBufferCount:
          description: |
            The maximum number of buffers that any link or connector will be configured to use involving this system.
          type: number
        workersPerNode:
          description: |
            Number of threads that participate in a query on a given node (e.g. the number of AMPs per node in Teradata)
          type: number
      type: object
    diagnostic-check-request:
      example:
        componentId: componentId
        dataFlow: IMPORT
        type: LINK
        nodeId: nodeId
        version: ACTIVE
        bandwidthMBPerNode: 0
        properties: "{}"
      properties:
        type:
          description: Type of diagostic check
          enum:
          - LINK
          - LINK_BANDWIDTH
          - CONNECTOR
          - CONNECTOR_INSTALL
          type: string
        componentId:
          description: "Id of the link or connector to check. Link Id should be used\
            \ with LINK and LINK_BANDWITH diagnostic checks, and Connector ID with\
            \ the CONNECTOR AND CONNECTOR_INSTALL operations. To find the Id of a\
            \ link use the API - /api/v1/config/links. To find the Id of a connector\
            \ use the API - /api/v1/config/connectors."
          type: string
        nodeId:
          description: Id of the driver node used in case of CONNECTOR_INSTALL.
          nullable: true
          type: string
        version:
          description: Version of the link or connector
          enum:
          - ACTIVE
          - PENDING
          type: string
        properties:
          description: "Connector properties to use for a CONNECTOR diagnostic check.\
            \ Untar the connector package and open the \\<version\\>/.pkgmeta/pkginfo.yaml\
            \ file to look at the supported connector properties. All properties for\
            \ the connector are listed in that file under “connectorProperties”. The\
            \ mapping of the properties with the names used in the UI and the user\
            \ guide, along with descriptions, can be found in the \\<version\\>/.pkgmeta/messages.properties\
            \ file."
          nullable: true
          type: object
        dataFlow:
          description: The direction data flows for LINK_BANDWIDTH checks.
          enum:
          - IMPORT
          - EXPORT
          nullable: true
          type: string
        bandwidthMBPerNode:
          description: Number of MB to send from one node to each other in case of
            LINK_BANDWIDTH check.
          format: int64
          nullable: true
          type: integer
      type: object
    diagnostic-check-response:
      example:
        totalBytesReceived: 9
        bandwidth: 3
        totalCount: 0
        inProgressCount: 5
        nodes:
        - bytesReceived: 2
          hostname: hostname
          systemId: systemId
          systemName: systemName
          startTime: 2000-01-23T04:56:07.000+00:00
          endTime: 2000-01-23T04:56:07.000+00:00
          bytesSent: 5
          error: error
          nodeId: nodeId
          status: IN_PROGRESS
        - bytesReceived: 2
          hostname: hostname
          systemId: systemId
          systemName: systemName
          startTime: 2000-01-23T04:56:07.000+00:00
          endTime: 2000-01-23T04:56:07.000+00:00
          bytesSent: 5
          error: error
          nodeId: nodeId
          status: IN_PROGRESS
        totalBytesSent: 7
        successCount: 6
        startTime: 2000-01-23T04:56:07.000+00:00
        id: id
        endTime: 2000-01-23T04:56:07.000+00:00
        lastModified: 2000-01-23T04:56:07.000+00:00
        errorCount: 1
        status: IN_PROGRESS
      properties:
        id:
          description: A UUID representing the diagnostic operation.
          type: string
        status:
          description: The overall status of the diagnostic check.
          enum:
          - IN_PROGRESS
          - SUCCESS
          - FAILURE
          type: string
        startTime:
          description: The time the operation started.
          format: date-time
          type: string
        endTime:
          description: The time the operation completed.
          format: date-time
          type: string
        lastModified:
          description: The time the status was last modified.
          format: date-time
          type: string
        totalCount:
          description: The total number of nodes to check.
          format: int64
          type: integer
        successCount:
          description: The number of nodes that succeeded.
          format: int32
          type: integer
        errorCount:
          description: The number of nodes that failed.
          format: int32
          type: integer
        inProgressCount:
          description: The number of nodes that are in progress.
          format: int32
          type: integer
        nodes:
          description: The status of each of the individual nodes.
          items:
            $ref: '#/components/schemas/diagnostic-check-node-response'
          type: array
        totalBytesSent:
          description: The total number of bytes sent in case of LINK_BANDWIDTH check.
          format: int64
          type: integer
        totalBytesReceived:
          description: The total number of bytes received in case of LINK_BANDWIDTH
            check.
          format: int64
          type: integer
        bandwidth:
          description: The measured bandwidth in bytes per second only in case of
            LINK_BANDWIDTH check.
          format: int64
          type: integer
      type: object
    diagnostic-check-node-response:
      example:
        bytesReceived: 2
        hostname: hostname
        systemId: systemId
        systemName: systemName
        startTime: 2000-01-23T04:56:07.000+00:00
        endTime: 2000-01-23T04:56:07.000+00:00
        bytesSent: 5
        error: error
        nodeId: nodeId
        status: IN_PROGRESS
      properties:
        nodeId:
          description: The id of the node
          type: string
        status:
          description: The status of the check
          enum:
          - IN_PROGRESS
          - SUCCESS
          - FAILURE
          type: string
        startTime:
          description: The time the operation started.
          format: date-time
          type: string
        endTime:
          description: The time the operation ended.
          format: date-time
          type: string
        bytesSent:
          description: The number of bytes sent. Only applicable to LINK_BANDWIDTH
            check.
          format: int64
          type: integer
        bytesReceived:
          description: The number of bytes received. Only applicable to LINK_BANDWIDTH
            check.
          format: int64
          type: integer
        error:
          description: The error associated with the failure if not successful.
          type: string
        hostname:
          description: The hostname or IP of the node.
          type: string
        systemId:
          description: The UUID of the system.
          type: string
        systemName:
          description: The name of the system.
          type: string
      type: object
    not-found-diagnostic-check:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 404
        error:
          description: The error description
          example: Not Found
        message:
          description: The error message
          example: No DIAGNOSTIC_CHECK with id=15fd2337-980b-4d0f-951e-e6c848a81b5d
            found.
        path:
          description: The path of the API called
          example: /api/v1/operations/diagnostic-check/15fd2337-980b-4d0f-951e-e6c848a81b5d
        errorCode:
          description: The error code for localization
          example: api.error.entity.not.found
        errorParams:
          description: Parameters for localization
          example:
          - api.error.param.entity.type.DIAGNOSTIC_CHECK
          - 15fd2337-980b-4d0f-951e-e6c848a81b5d
          items:
            type: string
          type: array
      type: object
    install-config-file:
      example:
        systemId: systemId
        configId: configId
        certFile: certFile
        clusterId: clusterId
        ports:
        - 0
        - 0
        managers:
        - managers
        - managers
        systemAccessToken: systemAccessToken
      properties:
        systemId:
          type: string
        clusterId:
          type: string
        configId:
          type: string
        systemAccessToken:
          type: string
        managers:
          items:
            type: string
          type: array
        ports:
          items:
            format: int32
            type: integer
          type: array
        certFile:
          type: string
      type: object
    manual-install-request:
      properties:
        systemId:
          description: Id of the system participating in the install
          type: string
        expirationDays:
          description: The number of days before the access token expires
          format: int32
          type: integer
        clusterOption:
          description: Cluster option for the host QGM cluster. Applicable for QueryGrid
            version 02.11+. The primary QGM cluster determines the version of the
            tdqg-node software to run on the data nodes and can run pre-02.09 versions
            of the QueryGrid fabric. It is always the first QGM cluster the tdqg-node
            service is configured to serve. The Secondary QGM clusters are always
            added after the tdqg-node service has been configured with a Primary QGM
            cluster. The tdqg-node software version selected by the secondary QueryGrid
            Manager cluster has no effect. The secondary QGM cluster cannot run pre-02.09
            versions of the QueryGrid fabric.
          enum:
          - PRIMARY
          - SECONDARY
          - EXCLUSIVE_PRIMARY
          nullable: true
          type: string
      type: object
    auto-install-response:
      example:
        clusterOption: PRIMARY
        systemId: systemId
        managerId: managerId
        totalCount: 0
        inProgressCount: 6
        nodes:
        - hostname: hostname
          startTime: 2000-01-23
          endTime: 2000-01-23
          error: error
          status: PENDING
        - hostname: hostname
          startTime: 2000-01-23
          endTime: 2000-01-23
          error: error
          status: PENDING
        pendingCount: 5
        successCount: 1
        startTime: 2000-01-23
        abortCount: 2
        installationId: installationId
        endTime: 2000-01-23
        lastModified: 2000-01-23
        errorCount: 5
        status: status
      properties:
        installationId:
          description: UUID representing the installation operation
          type: string
        managerId:
          description: The ID of the QGM handling the installation operation
          type: string
        clusterOption:
          description: Cluster option for the host QGM cluster. Applicable for QueryGrid
            version 02.11+. The primary QGM cluster determines the version of the
            tdqg-node software to run on the data nodes and can run pre-02.09 versions
            of the QueryGrid fabric. It is always the first QGM cluster the tdqg-node
            service is configured to serve. The Secondary QGM clusters are always
            added after the tdqg-node service has been configured with a Primary QGM
            cluster. The tdqg-node software version selected by the secondary QueryGrid
            Manager cluster has no effect. The secondary QGM cluster cannot run pre-02.09
            versions of the QueryGrid fabric.
          enum:
          - PRIMARY
          - SECONDARY
          - EXCLUSIVE_PRIMARY
          nullable: true
          type: string
        systemId:
          description: The ID of the system that is being installed.
          type: string
        status:
          description: The overall status of the install
          type: string
        startTime:
          description: The start time of the installation
          format: date
          type: string
        endTime:
          description: The finish time of the installation
          format: date
          type: string
        lastModified:
          description: The last modification time of the status
          format: date
          type: string
        totalCount:
          description: The number of installations performed
          format: int32
          type: integer
        inProgressCount:
          description: The number of installations currently in progress
          format: int32
          type: integer
        successCount:
          description: The number of successful installations
          format: int32
          type: integer
        errorCount:
          description: The number of failed installations
          format: int32
          type: integer
        pendingCount:
          description: The number of pending installations
          format: int32
          type: integer
        abortCount:
          description: The number of failed installations
          format: int32
          type: integer
        nodes:
          description: A List that contains the status information for each of the
            nodes
          items:
            $ref: '#/components/schemas/auto-install-node-status'
          type: array
      type: object
    auto-install-node-status:
      example:
        hostname: hostname
        startTime: 2000-01-23
        endTime: 2000-01-23
        error: error
        status: PENDING
      properties:
        hostname:
          description: The hostName or IP of the node
          type: string
        status:
          description: The Status of the installation
          enum:
          - PENDING
          - SUCCESS
          - FAILURE
          - ABORTED
          - IN_PROGRESS
          - UNKNOWN
          type: string
        startTime:
          description: The start time of the installation operation
          format: date
          type: string
        endTime:
          description: The finish time of the installation operation
          format: date
          type: string
        error:
          description: The error associated with the failure if the installation failed
          type: string
      type: object
    auto-install-request:
      properties:
        systemId:
          description: The system to which nodes will be added.
          nullable: true
          type: string
        nodes:
          description: This list of node hostNames or IPs to install
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        username:
          description: The SSH username
          nullable: true
          type: string
        password:
          description: The SSH password
          nullable: true
          type: string
        sshKey:
          description: The SSH key
          nullable: true
          type: string
        concurrency:
          description: The number of installs that can be performed at the same time.
          format: int32
          nullable: true
          type: integer
        clusterOption:
          description: Cluster option for the host QGM cluster. Applicable for QueryGrid
            version 02.11+. The primary QGM cluster determines the version of the
            tdqg-node software to run on the data nodes and can run pre-02.09 versions
            of the QueryGrid fabric. It is always the first QGM cluster the tdqg-node
            service is configured to serve. The Secondary QGM clusters are always
            added after the tdqg-node service has been configured with a Primary QGM
            cluster. The tdqg-node software version selected by the secondary QueryGrid
            Manager cluster has no effect. The secondary QGM cluster cannot run pre-02.09
            versions of the QueryGrid fabric.
          enum:
          - PRIMARY
          - SECONDARY
          - EXCLUSIVE_PRIMARY
          nullable: true
          type: string
      type: object
    import-system-response:
      example:
        connectorImportErrors: "{}"
        logs: logs
        diagnosticCheckId: diagnosticCheckId
      properties:
        diagnosticCheckId:
          description: The id of the ADD_CLUSTER diagnostic check operation.
          type: string
        logs:
          description: The logs for the import system operation.
          type: string
        connectorImportErrors:
          description: Map of connector IDs to connector import errors
          type: object
      type: object
    import-system-request:
      properties:
        managerHost:
          description: Hostname/IP of the remote QGM cluster
          type: string
        managerUser:
          description: Username to access remote QGM cluster's REST API
          type: string
        managerPass:
          description: managerPass to access remote QGM cluster's REST API
          type: string
        systemName:
          description: Name of the system in case user wants to rename
          nullable: true
          type: string
        systemId:
          description: Id of the system to import
          nullable: false
          type: string
        connectorIds:
          description: "List of ids of the connectors to import. If this value is\
            \ provided, a fabricId must also be provided"
          items:
            nullable: true
            type: string
          nullable: true
          type: array
        fabricId:
          description: "Id of the destination fabric in the local QGM cluster for\
            \ importing connectors.  If this value is provided, a value for connectorIds\
            \ must also be provided"
          nullable: true
          type: string
        connectorPassMap:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          description: Map of connector IDs to password map
          example:
            Connector1Id:
              user1: pass1
              user2: pass2
          nullable: true
          type: object
        dataCenterId:
          description: Id of the data center into which to import the system
          type: string
        clusterOption:
          description: Cluster option for the host QGM cluster. Applicable for QueryGrid
            version 02.11+. The primary QGM cluster determines the version of the
            tdqg-node software to run on the data nodes and can run pre-02.09 versions
            of the QueryGrid fabric. It is always the first QGM cluster the tdqg-node
            service is configured to serve. The Secondary QGM clusters are always
            added after the tdqg-node service has been configured with a Primary QGM
            cluster. The tdqg-node software version selected by the secondary QueryGrid
            Manager cluster has no effect. The secondary QGM cluster cannot run pre-02.09
            versions of the QueryGrid fabric.
          enum:
          - PRIMARY
          - SECONDARY
          - EXCLUSIVE_PRIMARY
          type: string
      type: object
    manager-credentials:
      properties:
        managerHost:
          description: Hostname/IP of the remote QGM cluster
          type: string
        managerUser:
          description: Username to access remote QGM cluster's REST API
          type: string
        managerPass:
          description: managerPass to access remote QGM cluster's REST API
          type: string
      type: object
    not-found-import-system:
      properties:
        timestamp:
          description: The time of the error
          example: 2018-02-25T20:36:31.121+0000
        status:
          description: The http status code
          example: 404
        error:
          description: The error description
          example: Not Found
        message:
          description: The error message
          example: "No diagnostic check operation found with the id: f5d72daf-aa8f-486c-8058-4fc587c0b471\
            \ found."
        path:
          description: The path of the API called
          example: /api/v1/operations/import-system/f5d72daf-aa8f-486c-8058-4fc587c0b471
        errorCode:
          description: The error code for localization
          example: api.error.entity.not.found
        errorParams:
          description: Parameters for localization
          example:
          - api.error.param.entity.type.null
          - null
          items:
            type: string
          type: array
      type: object
    create-foreign-server-response:
      example:
        componentId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        dataFlow: EXPORT
        creationTime: 2018-01-31T17:59:22.055+0000
        seedInfo: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        type: CONNECTOR_CFS
        version: ACTIVE
        initiatorNodeId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        abortTime: "10"
        id: f5d72daf-aa8f-486c-8058-4fc587c0b471
        lastModified: 2018-01-31T17:59:22.055+0000
        targetNodeId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        nodeId: 15fd2337-980b-4d0f-951e-e6c848a81b5d
        bandwidthMBPerNode: 0
        hash: 0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff
        properties:
          initiatorAdminPassword: "[QGM-ENCRYPTED]aaaaaabbbbbbccccccdddddd"
          initiatorAdminUser: dbc
          foreignServerName: foreign-server-name
      properties:
        id:
          description: The diagnosticCheckId of the CONNECTOR_CFS diagnostic check
            operation.
          example: f5d72daf-aa8f-486c-8058-4fc587c0b471
          type: string
        lastModified:
          description: The last time the diagnostic check operation was modified.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        hash:
          description: The hash value of the diagnostic check operation
          example: 0000111122223333444455556666777788889999aaaabbbbccccddddeeeeffff
          type: string
        type:
          description: Type of diagnostic check
          example: CONNECTOR_CFS
          type: string
        componentId:
          description: Id of the link the request is associated with
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        nodeId:
          description: The id of the node
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        version:
          description: Version of the link
          example: ACTIVE
          type: string
        properties:
          $ref: '#/components/schemas/create_foreign_server_response_properties'
        dataFlow:
          description: The direction data flows for LINK_BANDWIDTH checks.
          example: EXPORT
          type: string
        abortTime:
          description: The remaining time until the operation aborts
          example: "10"
          type: string
        creationTime:
          description: The time the diagnostic check operation was created.
          example: 2018-01-31T17:59:22.055+0000
          type: string
        bandwidthMBPerNode:
          description: Number of MB to send from one node to each other in case of
            LINK_BANDWIDTH check.
          format: int64
          type: integer
        seedInfo:
          description: Information about the seed associated with this diagnostic
            check
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        initiatorNodeId:
          description: The id of the initiator node
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
        targetNodeId:
          description: The id of the target node
          example: 15fd2337-980b-4d0f-951e-e6c848a81b5d
          type: string
      type: object
    create-foreign-server-request:
      properties:
        initiatorAdminUser:
          description: "Admin user on initiator system used to create the foreign\
            \ server, create authorization objects, and grant insert/select on the\
            \ foreign server"
          nullable: false
          type: string
        initiatorAdminPassword:
          description: Password of the initiator's admin user
          nullable: false
          type: string
        linkId:
          description: Id of the link to create the foreign server for
          nullable: false
          type: string
        version:
          description: Version of the link
          enum:
          - ACTIVE
          - PENDING
          nullable: false
          type: string
        foreignServerName:
          description: Name of the foreign server to create
          nullable: false
          type: string
        authType:
          description: "Specify the authorization type used. INVOKER means that a\
            \ dummy authorization object is created by the initiator admin user and\
            \ then any user which is granted permission to use the foreign server\
            \ must also create an authorization object with the same name in their\
            \ own database. The users authorization object is passed to target connector\
            \ to create the JDBC session. DEFINER means that the authorization object\
            \ is created by initiator admin user (using their credentials) and passed\
            \ by all other users granted access to the foreign server. If DEFINER\
            \ is used then the service account will be used on target as login user\
            \ before connecting through to the initiator user. For Teradata-to-BigQuery\
            \ link, provide \"serviceAccountName\" and \"serviceAccountPassword\"\
            \ for DEFINER authType and \"targetAdminUser\" and \"targetAdminPassword\"\
            \ for INVOKER authType. This value can be left blank if an authorization\
            \ object does not need to be attached to the foreign server."
          enum:
          - INVOKER
          - DEFINER
          nullable: true
          type: string
        authObjectName:
          description: "Name for authorization object. If authType is INVOKER or DEFINER,\
            \ this value cannot be null or empty."
          nullable: true
          type: string
        targetAdminUser:
          description: "Admin user on target system used to create service account\
            \ (if needed) and grant connect through to all allowedUsers. For Teradata-to-BigQuery\
            \ link with INVOKER authType, provide the client ID of the Google Cloud\
            \ user."
          nullable: true
          type: string
        targetAdminPassword:
          description: "Password of admin user on target system. For Teradata-to-BigQuery\
            \ link with INVOKER authType, use credentials of the Google Cloud user\
            \ to provide this value as {clientSecret}{singlespace}{refreshToken}."
          nullable: true
          type: string
        serviceAccountName:
          description: "Name of service account to create on target if they don't\
            \ already exist. All users listed in allowedUsers will be granted connect\
            \ through this service user. For Teradata-to-BigQuery link with DEFINER\
            \ authType, provide the client ID of the Google Cloud user."
          nullable: true
          type: string
        serviceAccountPassword:
          description: "Password of service account. For Teradata-to-BigQuery link\
            \ with DEFINER authType, use credentials of the Google Cloud user to provide\
            \ this value as {clientSecret}{singlespace}{refreshToken}."
          nullable: true
          type: string
        serviceAccountTempSizeInMB:
          description: If the service account does not exist on target system then
            it will be created with this temp size. This field is only used for Teradata-to-Teradata
            link.
          nullable: true
          type: int
        serviceAccountSpoolSizeInMB:
          description: If the service account does not exist on target system then
            it will be created with this Spool size. This field is only used for Teradata-to-Teradata
            link.
          nullable: true
          type: int
        allowedUsers:
          description: "Users to grant insert/select on the foreign server created\
            \ on initiator system and grant connect through service account, if one\
            \ was created, on target system."
          example:
          - user1
          - user2
          items:
            type: string
          nullable: true
          type: array
      type: object
    bulk-delete-request:
      properties:
        configType:
          description: Type of the configuration object.
          enum:
          - NODE
          - ISSUE
          type: string
        ids:
          example:
          - 23b9f4a9-223d-424d-a78b-ce378be62e24
          - 8e2ad797-60a3-4859-bc7c-bf8bed42e085
          items:
            type: string
          type: array
      type: object
    install-config-file_1:
      properties:
        systemId:
          type: string
        clusterId:
          type: string
        configId:
          type: string
        systemAccessToken:
          type: string
        managers:
          items:
            type: string
          type: array
        ports:
          items:
            format: int32
            type: integer
          type: array
        certFile:
          type: string
        managersExtended:
          items:
            items:
              type: string
            type: array
          type: array
        proxies:
          items:
            type: string
          type: array
        rpmUrlPath:
          type: string
        debUrlPath:
          type: string
        armRpmUrlPath:
          type: string
        armDebUrlPath:
          type: string
        clusterOption:
          type: string
        expirationTimestamp:
          format: date-time
          type: string
        managerLBAddress:
          type: string
      type: object
    system-alerts-request:
      properties:
        systemId:
          type: string
        issueProblemType:
          type: string
      type: object
    datasource:
      example:
        connectorDetails: ""
        systemDetails: ""
      properties:
        systemDetails:
          description: The details of the system created for the Datasource
        connectorDetails:
          description: The details of the connector created for the Datasource
      type: object
    post-datasource:
      properties:
        name:
          description: The name of the system.
          example: Customer-EMR
          type: string
        description:
          description: The description of the system.
          example: Customer EMR system.
          type: string
        region:
          description: Region the system is deployed in.
          example: US-WEST-2
          type: string
        platformType:
          description: "System platform type.[AWS]"
          example: AWS
          type: string
        datasourceType:
          description: "Type of datasource [TERADATA, HADOOP, OTHER]."
          example: HADOOP
          type: string
        systemFlavor:
          description: "Flavor of the Hadoop system [EMR, CDP, DATAPROC, HDINSIGHT]\
            \ (case-insensitive). Required if datasourceType is HADOOP."
          example: EMR
          type: string
        customerBridgeId:
          description: The id of the bridge system.
          example: 31246bad-353b-2aa3-2ude-91f2560fb412
          type: string
        softwareVersion:
          description: The version of the tdqg-node package that should be installed
            on all nodes of the system.
          example: 02.19.00.00-1
          type: string
        maximumMemoryPerNode:
          description: The maximum memory per node in bytes allowed to be used by
            QueryGrid queries.
          example: 1073741824
          type: number
        enableOverridePort:
          description: Flags if this system is overriding the fabric TCP server socket.
          example: false
          type: boolean
        overridePort:
          description: The port number for the tdqg-node service to bind to.
          example: 5000
          type: number
        autoNodeDelete:
          description: Flag to enable auto node delete.
          example: false
          type: boolean
        autoNodeDeleteMinutes:
          description: Number of minutes a node is offline before being auto deleted
            when autoNodeDelete is enabled.
          example: 10
          type: number
        clusterOption:
          description: Node cluster option
          example: PRIMARY
          type: string
        enableProxy:
          description: Flag to enable proxy support
          example: false
          type: boolean
        proxyPort:
          description: The port number for proxy
          example: 1055
          type: integer
        proxySupportType:
          description: The type of proxy
          example: BRIDGE_PROXY
          type: string
        proxyNetworkId:
          description: The network id for proxy
          example: b1bee789-4b90-4232-b977-0bff53d5a316
          type: string
        proxySystemId:
          description: The system id for proxy
          example: b1bee789-4b90-4232-b977-0bff53d5a316
          type: string
        connectorName:
          description: The name of the connector.
          example: hiveConn
          type: string
        connectorDescription:
          description: A description of the connector.
          example: Customer EMR connector
          type: string
        connectorType:
          description: "Type of connector [Teradata, Hive, Spark, GenericJDBC]."
          example: hive
          type: string
        connectorSoftwareVersion:
          description: The version of connector software.
          example: 02.19.00.00-1
          type: string
        connectorProperties:
          description: The connector properties to set. Untar the connector package
            and open the \<version\>/.pkgmeta/pkginfo.yaml file to look at the supported
            connector properties.
          example:
            server: dummy.teradata.com
            hiveEngine: mr
            executionType: THRIFTSERVER
            jdbcUrl: jdbc:redshift://dummyredshift.us-west-2.redshift.amazonaws.com:5439/testdb
          type: object
        overrideableProperties:
          description: The connector properties which can be overridden by the user.
            Untar the connector package and open the \<version\>/.pkgmeta/pkginfo.yaml
            file to look at the supported connector properties. All overridable properties
            for the connector are listed in that file under “connectorProperties”
            with 'overridable' attribute set as 'True'.
          items:
            type: string
          type: array
        networkId:
          description: The id of the network which is to be added to the system tag.
            Use load balancer network ID if no customer bridge(customerBridgeId) is
            present else use target customer network ID to use.
          example: 33946bce-355c-2ad3-2bae-91f2390fg412
          type: string
        bridgeNetworkId:
          description: The id of the network which is to be added to the bridge system
            tag. Use load balancer network ID if customer bridge(customerBridgeId)
            is present else not used.
          example: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: string
        initiatorSystem:
          description: Initiator system details
          example:
            userMappingId: 33946bcd-355b-2ac3-2bde-91f2390fb412
          type: object
        targetSystem:
          description: Target system details
          example:
            userMappingId: 22995fad-13e8-42fd-82c6-31f2390fb440
          type: object
      type: object
    _nodes_delete_request:
      properties:
        ids:
          example:
          - 23b9f4a9-223d-424d-a78b-ce378be62e24
          - 8e2ad797-60a3-4859-bc7c-bf8bed42e085
          items:
            type: string
          type: array
      type: object
    _software_post_request:
      properties:
        file:
          format: binary
          type: string
        jdbcDriverFile:
          format: binary
          type: string
        jdbcDriverName:
          type: string
      type: object
    _software_jdbc_driver_post_request:
      properties:
        jdbcDriverFile:
          format: binary
          type: string
        jdbcDriverName:
          type: string
      type: object
    _config_comm_policies__id__patch_request:
      properties:
        name:
          description: The name of the communication policy.
          example: WAN Policy
          type: string
        description:
          description: The description of the communication policy.
          example: Production communication policy used by production workloads.
          type: string
      type: object
    _config_networks__id__patch_request:
      properties:
        name:
          description: The name of the network.
          example: Network1
          type: string
        description:
          description: The description of the network.
          example: Production network used by production workloads.
          type: string
        matchingRules:
          description: The rules that define how to identity network interfaces associated
            with the network.
          type: object
      type: object
    _config_fabrics__id__patch_request:
      properties:
        name:
          description: The name of the fabric.
          example: Fabric1
          type: string
        description:
          description: The description of the fabric.
          example: Production fabric used by production workloads.
          type: string
      type: object
    _config_connectors__id__patch_request:
      properties:
        name:
          description: The name of the connector.
          example: Connector1
          type: string
        description:
          description: The description of the connector.
          example: Production connector used by production workloads.
          type: string
      type: object
    _config_links__id__patch_request:
      properties:
        name:
          description: The name of the link.
          example: Link1
          type: string
        description:
          description: The description of the link.
          example: Production link used by production workloads.
          type: string
      type: object
    api_info_features:
      example:
        roleMapping: true
        proxy: true
        multipleClusters: true
        bulkDelete: true
        memoryCalculator: true
        autoNodeDelete: true
        bridge: true
        bulkNodeDelete: true
      properties:
        bridge:
          description: Flags if bridge support is available.
          example: true
          type: boolean
        roleMapping:
          description: Flags if role mapping support is available.
          example: true
          type: boolean
        bulkNodeDelete:
          description: Flags if bulk delete of nodes is available.
          example: true
          type: boolean
        bulkDelete:
          description: Flags if bulk delete feature is available.
          example: true
          type: boolean
        memoryCalculator:
          description: Flags if shared memory calculation is supported.
          example: true
          type: boolean
        multipleClusters:
          description: Flags if multiple cluster feature is available.
          example: true
          type: boolean
        proxy:
          description: Flags if proxy feature is available.
          example: true
          type: boolean
        autoNodeDelete:
          description: Flags if auto-node delete feature is available
          example: true
          type: boolean
      type: object
    manager_networkInterfaces_inner:
      example:
        prefixLength: 16
        address: 169.254.169.254
        name: eth0
      properties:
        name:
          description: The name of the network interface
          example: eth0
        address:
          description: The address associated with the network interface
          example: 169.254.169.254
        prefixLength:
          description: The subnet prefix length
          example: 16
      type: object
    manager__extraInfo:
      description: Information not part of the saved manager schema but information
        that is associated and useful to know about the manager.
      example:
        lastHeartbeat: 2000-01-23T04:56:07.000+00:00
        freeSpace: 149786984448
        diskUsage: 44.2
        dataCenterName: San Diego
        totalSpace: 268435456000
        status: ONLINE
      properties:
        status:
          description: The status of the manager (e.g. ONLINE or OFFLINE).
          example: ONLINE
          type: string
        lastHeartbeat:
          description: The last time this Manager sent a heartbeat
          format: date-time
          type: string
        diskUsage:
          description: The percentage of available disk space on the disk volume containing
            logs and query metrics.
          example: 44.2
          type: number
        freeSpace:
          description: The free disk space in bytes.
          example: 149786984448
          type: number
        totalSpace:
          description: The total disk space in bytes.
          example: 268435456000
        dataCenterName:
          description: The data center the manager is located in.
          example: San Diego
      type: object
    node__extraInfo:
      description: Information not part of the saved node schema but information that
        is associated and useful to know about the node.
      example:
        systemName: TD1
        startTime: 2000-01-23T04:56:07.000+00:00
        dataCenterName: San Diego
        softwareVersion: 02.04.00.02-11
        status: ONLINE
      properties:
        status:
          description: The status of the node (e.g. ONLINE or OFFLINE).
          example: ONLINE
          type: string
        startTime:
          description: The start time of the node service.
          format: date-time
          type: string
        systemName:
          description: The name of the system the node belongs to.
          example: TD1
        dataCenterName:
          description: The data center the node is located in.
          example: San Diego
        softwareVersion:
          description: The version of tdqg-node software the node is running
          example: 02.04.00.02-11
      type: object
    comm_policy_allOf:
      properties:
        previous:
          $ref: '#/components/schemas/comm-policy-version'
        active:
          $ref: '#/components/schemas/comm-policy-version'
        pending:
          $ref: '#/components/schemas/comm-policy-version'
      type: object
      example: null
    active_comm_policy_allOf:
      properties:
        version:
          description: The version of the comm-policy.
          example: ACTIVE
          type: string
      type: object
      example: null
    pending_comm_policy_allOf:
      properties:
        version:
          description: The version of the comm-policy.
          example: PENDING
          type: string
      type: object
      example: null
    previous_comm_policy_allOf:
      properties:
        version:
          description: The version of the comm-policy.
          example: PREVIOUS
          type: string
      type: object
      example: null
    network_allOf:
      properties:
        previous:
          $ref: '#/components/schemas/network-version'
        active:
          $ref: '#/components/schemas/network-version'
        pending:
          $ref: '#/components/schemas/network-version'
      type: object
      example: null
    active_network_allOf:
      properties:
        version:
          description: The version of the network.
          example: ACTIVE
          type: string
      type: object
      example: null
    pending_network_allOf:
      properties:
        version:
          description: The version of the network.
          example: PENDING
          type: string
      type: object
      example: null
    previous_network_allOf:
      properties:
        version:
          description: The version of the network.
          example: PREVIOUS
          type: string
      type: object
      example: null
    fabric_allOf:
      properties:
        previous:
          $ref: '#/components/schemas/fabric-version'
        active:
          $ref: '#/components/schemas/fabric-version'
        pending:
          $ref: '#/components/schemas/fabric-version'
      type: object
      example: null
    active_fabric_allOf:
      properties:
        version:
          description: The version of the fabric.
          example: ACTIVE
          type: string
      type: object
      example: null
    pending_fabric_allOf:
      properties:
        version:
          description: The version of the fabric.
          example: PENDING
          type: string
      type: object
      example: null
    previous_fabric_allOf:
      properties:
        version:
          description: The version of the fabric.
          example: PREVIOUS
          type: string
      type: object
      example: null
    connector_allOf:
      properties:
        previous:
          $ref: '#/components/schemas/connector-version'
        active:
          $ref: '#/components/schemas/connector-version'
        pending:
          $ref: '#/components/schemas/connector-version'
      type: object
      example: null
    active_connector_allOf:
      properties:
        version:
          description: The version of the connector.
          example: ACTIVE
          type: string
      type: object
      example: null
    pending_connector_allOf:
      properties:
        version:
          description: The version of the connector.
          example: PENDING
          type: string
      type: object
      example: null
    previous_connector_allOf:
      properties:
        version:
          description: The version of the connector.
          example: PREVIOUS
          type: string
      type: object
      example: null
    link_allOf:
      properties:
        previous:
          $ref: '#/components/schemas/link-version'
        active:
          $ref: '#/components/schemas/link-version'
        pending:
          $ref: '#/components/schemas/link-version'
      type: object
      example: null
    active_link_allOf:
      properties:
        version:
          description: The version of the link.
          example: ACTIVE
          type: string
      type: object
      example: null
    pending_link_allOf:
      properties:
        version:
          description: The version of the link.
          example: PENDING
          type: string
      type: object
      example: null
    previous_link_allOf:
      properties:
        version:
          description: The version of the link.
          example: PREVIOUS
          type: string
      type: object
      example: null
    node_virtual_ips_response_networkInterfaces_inner:
      example:
        address: 169.254.169.254
        name: eth0
      properties:
        name:
          description: The name of the network interface
          example: eth0
        address:
          description: The address associated with the network interface
          example: 169.254.169.254
      type: object
    create_foreign_server_response_properties:
      example:
        initiatorAdminPassword: "[QGM-ENCRYPTED]aaaaaabbbbbbccccccdddddd"
        initiatorAdminUser: dbc
        foreignServerName: foreign-server-name
      properties:
        initiatorAdminPassword:
          description: Password of the admin user
          example: "[QGM-ENCRYPTED]aaaaaabbbbbbccccccdddddd"
          type: string
        initiatorAdminUser:
          description: "Admin user on initiator system used to create the foreign\
            \ server, create authorization objects, and grant insert/select on the\
            \ foreign server"
          example: dbc
          type: string
        foreignServerName:
          description: Name of the foreign server to create
          example: foreign-server-name
          type: string
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
